{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["// import './creational/creational';\n// import './structural/structural';\n// import './behavioral/behavioral';\n// ------------------------------------\n\n// ==================factory-method=========================\n// interface Subscription {\n//   operation(): string;\n// }\n\n// class GamerSubscription implements Subscription {\n//   public operation(): string {\n//     return 'Gamer';\n//   }\n// }\n\n// class PremiumSubscription implements Subscription {\n//   public operation(): string {\n//     return 'Premium';\n//   }\n// }\n\n// abstract class SubscriptionCreator {\n//   public abstract createSubscription(): Subscription;\n\n//   public manageSubscription(): string {\n//     const subscription = this.createSubscription();\n\n//     return `Managing a ${subscription.operation()} subscription`;\n//   }\n// }\n\n// class GamerSubscriptionCreator extends SubscriptionCreator {\n//   public createSubscription(): Subscription {\n//     return new GamerSubscription();\n//   }\n// }\n\n// class PremiumSubscriptionCreator extends SubscriptionCreator {\n//   public createSubscription(): Subscription {\n//     return new PremiumSubscription();\n//   }\n// }\n\n// const gamerSubscriptionCreator = new GamerSubscriptionCreator();\n// console.log(gamerSubscriptionCreator.manageSubscription());\n\n// const premiumSubscriptionCreator = new PremiumSubscriptionCreator();\n// console.log(premiumSubscriptionCreator.manageSubscription());\n\n// =====================singleton==============================\n// interface ApiResponse {\n//   id: number;\n//   name: string;\n//   data: any;\n// }\n\n// export class ApiManager {\n//   private static instance: ApiManager;\n\n//   private constructor() {}\n\n//   public static getInstance(): ApiManager {\n//     if (!ApiManager.instance) {\n//       ApiManager.instance = new ApiManager();\n//     }\n//     return ApiManager.instance;\n//   }\n\n//   public async get(url: string): Promise<any> {\n//     try {\n//       const response = await fetch(url);\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n//       return (await response.json()) as any;\n//     } catch (error) {\n//       console.error('Failed to fetch data:', error);\n//       throw error;\n//     }\n//   }\n// }\n\n// // Використання Singleton для викликів API\n// const apiManager1 = ApiManager.getInstance();\n// const apiManager2 = ApiManager.getInstance();\n\n// export const API_KEY = 'bbcabf34e55a9240d0c44542dbf6e7ac';\n// export const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather';\n\n// apiManager1\n//   .get(`${BASE_URL}?q=Lviv&appid=${API_KEY}&units=metric`)\n//   .then(data => console.log('Data fetched:', data))\n//   .catch(error => console.error('Error fetching data:', error));\n\n// // Перевірка того, що екземпляри є однаковими\n// console.log(apiManager1 === apiManager2); // Виведе: true\n\n// =================builder===============================================\n// interface FlowerBouquetBuilder {\n//   setFlowerType(flowerType: string): this;\n//   setQuantity(quantity: number): this;\n//   setColor(color: string): this;\n//   setNeedsWrapping(needsWrapping: boolean): this;\n//   build(): FlowerBouquet;\n// }\n// class FlowerBouquet {\n//   public flowerType?: string;\n//   public quantity?: number;\n//   public color?: string;\n//   public needsWrapping?: boolean;\n\n//   public describe(): void {\n//     console.log(\n//       `Bouquet details:\\nFlower Type: ${this.flowerType}\\nQuantity: ${this.quantity}\\nColor: ${this.color}\\nNeeds Wrapping: ${this.needsWrapping}`\n//     );\n//   }\n// }\n// class FlowerBouquetBuilderImpl implements FlowerBouquetBuilder {\n//   private bouquet: FlowerBouquet;\n\n//   constructor() {\n//     this.bouquet = new FlowerBouquet();\n//   }\n\n//   public setFlowerType(flowerType: string): this {\n//     this.bouquet.flowerType = flowerType;\n//     return this;\n//   }\n\n//   public setQuantity(quantity: number): this {\n//     this.bouquet.quantity = quantity;\n//     return this;\n//   }\n\n//   public setColor(color: string): this {\n//     this.bouquet.color = color;\n//     return this;\n//   }\n\n//   public setNeedsWrapping(needsWrapping: boolean): this {\n//     this.bouquet.needsWrapping = needsWrapping;\n//     return this;\n//   }\n\n//   public build(): FlowerBouquet {\n//     const result = this.bouquet;\n//     this.reset();\n//     return result;\n//   }\n\n//   private reset(): void {\n//     this.bouquet = new FlowerBouquet();\n//   }\n// }\n\n// // Приклад використання\n// const builder = new FlowerBouquetBuilderImpl();\n\n// const bouquetRoses = builder\n//   .setFlowerType('Roses')\n//   .setQuantity(12)\n//   .setColor('Red')\n//   .setNeedsWrapping(true)\n//   .build();\n\n// bouquetRoses.describe();\n\n// ==========prototype=====================================================\n// class RoseBouquet {\n//   constructor(\n//     public quantity: number,\n//     public color: string,\n//     public needsWrapping: boolean\n//   ) {}\n\n//   clone(): RoseBouquet {\n//     return new RoseBouquet(this.quantity, this.color, this.needsWrapping);\n//   }\n// }\n\n// // Приклад використання\n// const originalBouquet = new RoseBouquet(12, 'Red', true);\n\n// const newBouquet = originalBouquet.clone();\n// newBouquet.quantity = 24;\n\n// console.log(originalBouquet);\n// console.log(newBouquet);\n\n// -------------var-2----------------------------------------------------\n\n// interface Bouquet {\n//   setQuantity(quantity: number): void;\n//   setColor(color: string): void;\n//   setNeedsWrapping(needsWrapping: boolean): void;\n//   clone(): Bouquet;\n// }\n\n// class RoseBouquet implements Bouquet {\n//   constructor(\n//     private quantity: number,\n//     private color: string,\n//     private needsWrapping: boolean\n//   ) {}\n\n//   public setQuantity(quantity: number): void {\n//     this.quantity = quantity;\n//   }\n\n//   public setColor(color: string): void {\n//     this.color = color;\n//   }\n\n//   public setNeedsWrapping(needsWrapping: boolean): void {\n//     this.needsWrapping = needsWrapping;\n//   }\n\n//   public clone(): Bouquet {\n//     return new RoseBouquet(this.quantity, this.color, this.needsWrapping);\n//   }\n// }\n\n// // Приклад використання\n// const originalBouquet: Bouquet = new RoseBouquet(12, 'Red', true);\n// const newBouquet = originalBouquet.clone();\n\n// newBouquet.setQuantity(24);\n// newBouquet.setColor('yellow');\n\n// console.log(originalBouquet);\n// console.log(newBouquet);\n\n// ==========abstract-factory===================================\n// Інтерфейси для продуктів\n// interface ElectricMoped {\n//   start(): string;\n// }\n\n// interface GasolineMoped {\n//   start(): string;\n// }\n\n// // Реалізації для стилю Futuristic\n// class FuturisticElectricMoped implements ElectricMoped {\n//   start(): string {\n//     return 'Стартую на футуристичному електромопеді Альфа';\n//   }\n// }\n\n// class FuturisticGasolineMoped implements GasolineMoped {\n//   start(): string {\n//     return 'Стартую на футуристичному бензиновому мопеді Альфа';\n//   }\n// }\n\n// // Реалізації для стилю Retro\n// class RetroElectricMoped implements ElectricMoped {\n//   start(): string {\n//     return 'Стартую на ретро електромопеді Альфа';\n//   }\n// }\n\n// class RetroGasolineMoped implements GasolineMoped {\n//   start(): string {\n//     return 'Стартую на ретро бензиновому мопеді Альфа';\n//   }\n// }\n\n// // Абстрактна фабрика\n// interface MopedFactory {\n//   createElectricMoped(): ElectricMoped;\n//   createGasolineMoped(): GasolineMoped;\n// }\n\n// // Фабрика для Futuristic стилю\n// class FuturisticMopedFactory implements MopedFactory {\n//   createElectricMoped(): ElectricMoped {\n//     return new FuturisticElectricMoped();\n//   }\n\n//   createGasolineMoped(): GasolineMoped {\n//     return new FuturisticGasolineMoped();\n//   }\n// }\n\n// // Фабрика для Retro стилю\n// class RetroMopedFactory implements MopedFactory {\n//   createElectricMoped(): ElectricMoped {\n//     return new RetroElectricMoped();\n//   }\n\n//   createGasolineMoped(): GasolineMoped {\n//     return new RetroGasolineMoped();\n//   }\n// }\n\n// // Клієнтський код\n// function clientCode(factory: MopedFactory) {\n//   const electricMoped = factory.createElectricMoped();\n//   const gasolineMoped = factory.createGasolineMoped();\n\n//   console.log(electricMoped.start());\n//   console.log(gasolineMoped.start());\n// }\n\n// // Використання\n// const futuristicMopedFactory = new FuturisticMopedFactory();\n// console.log('Futuristic Mopeds:');\n// clientCode(futuristicMopedFactory);\n\n// const retroMopedFactory = new RetroMopedFactory();\n// console.log('\\nRetro Mopeds:');\n// clientCode(retroMopedFactory);\n\n// ==============adapter=========================================\n// interface PcGame {\n//   launch(): string;\n// }\n\n// // Клас, що описує стару гру для приставки\n// class ConsoleGame {\n//   startOnConsole(): string {\n//     return 'Гра для старої приставки.';\n//   }\n// }\n\n// // Адаптер, який дозволяє запустити гру на ПК\n// class ConsoleToPcAdapter implements PcGame {\n//   private readonly consoleGame: ConsoleGame;\n\n//   constructor(consoleGame: ConsoleGame) {\n//     this.consoleGame = consoleGame;\n//   }\n\n//   launch(): string {\n//     return `${this.consoleGame.startOnConsole()} (адаптовано для запуску на ПК)`;\n//   }\n// }\n\n// // Використання\n// const consoleGame = new ConsoleGame();\n// const pcGameAdapter = new ConsoleToPcAdapter(consoleGame);\n\n// console.log(pcGameAdapter.launch());\n\n// =========decorator===========================================\n// Базовий інтерфейс\n// interface Player {\n//   getStats(): string;\n//   getProtectionLevel(): number;\n// }\n\n// // Конкретний компонент: базовий герой\n// class BasicPlayer implements Player {\n//   getStats(): string {\n//     return 'Player: Basic equipment';\n//   }\n\n//   getProtectionLevel(): number {\n//     return 0; // Початковий рівень захисту\n//   }\n// }\n\n// // Базовий декоратор\n// class PlayerDecorator implements Player {\n//   protected player: Player;\n\n//   constructor(player: Player) {\n//     this.player = player;\n//   }\n\n//   getStats(): string {\n//     return this.player.getStats();\n//   }\n\n//   getProtectionLevel(): number {\n//     return this.player.getProtectionLevel();\n//   }\n// }\n\n// // Декоратор: додавання бронежилета\n// class ArmorDecorator extends PlayerDecorator {\n//   getStats(): string {\n//     return `${super.getStats()} + Armor`;\n//   }\n\n//   getProtectionLevel(): number {\n//     return super.getProtectionLevel() + 50; // Додаємо 50 одиниць захисту\n//   }\n// }\n\n// // Декоратор: додавання каски\n// class HelmetDecorator extends PlayerDecorator {\n//   getStats(): string {\n//     return `${super.getStats()} + Helmet`;\n//   }\n\n//   getProtectionLevel(): number {\n//     return super.getProtectionLevel() + 25; // Додаємо 25 одиниць захисту\n//   }\n// }\n\n// // Використання\n// const basicPlayer = new BasicPlayer();\n// console.log(\n//   'Базовий гравець:',\n//   basicPlayer.getStats(),\n//   '| Захист:',\n//   basicPlayer.getProtectionLevel()\n// );\n\n// const playerWithArmor = new ArmorDecorator(basicPlayer);\n// console.log(\n//   'Гравець з бронежилетом:',\n//   playerWithArmor.getStats(),\n//   '| Захист:',\n//   playerWithArmor.getProtectionLevel()\n// );\n\n// const playerWithArmorAndHelmet = new HelmetDecorator(playerWithArmor);\n// console.log(\n//   'Гравець з бронежилетом і каскою:',\n//   playerWithArmorAndHelmet.getStats(),\n//   '| Захист:',\n//   playerWithArmorAndHelmet.getProtectionLevel()\n// );\n\n// ===============bridge======================================\n// // інтерфейс\n// interface Color {\n//   applyColor(): string;\n// }\n\n// class RedColor implements Color {\n//   applyColor() {\n//     return 'червоного кольору.';\n//   }\n// }\n\n// class BlueColor implements Color {\n//   applyColor() {\n//     return 'синього кольору.';\n//   }\n// }\n\n// // Абстракція для моделі мопеда\n// abstract class Moped {\n//   protected color: Color;\n\n//   constructor(color: Color) {\n//     this.color = color;\n//   }\n\n//   abstract displayDetails(): string;\n// }\n\n// // Конкретні моделі мопедів\n// class AlphaMoped extends Moped {\n//   displayDetails() {\n//     return `Мопед Альфа ${this.color.applyColor()}`;\n//   }\n// }\n\n// class KarpatyMoped extends Moped {\n//   displayDetails() {\n//     return `Мопед Карпати ${this.color.applyColor()}`;\n//   }\n// }\n\n// // Використання\n// const alphaRed = new AlphaMoped(new RedColor());\n// const karpatyBlue = new KarpatyMoped(new BlueColor());\n\n// function getDetails(moped: Moped) {\n//   const result = moped.displayDetails();\n//   console.log(result);\n// }\n\n// getDetails(karpatyBlue);\n// getDetails(alphaRed);\n\n// ===============facade=====================================\n// // Підсистема 1: Двигун мопеда\n// class Engine {\n//   start() {\n//     console.log('Двигун запущено');\n//   }\n\n//   stop() {\n//     console.log('Двигун зупинено');\n//   }\n// }\n\n// // Підсистема 2: Ліхтарі мопеда\n// class Lights {\n//   turnOn() {\n//     console.log('Ліхтарі включені');\n//   }\n\n//   turnOff() {\n//     console.log('Ліхтарі вимкнено');\n//   }\n// }\n\n// // Підсистема 3: Кермо мопеда\n// class Handlebar {\n//   turnLeft() {\n//     console.log('Кермо повернуте наліво');\n//   }\n\n//   turnRight() {\n//     console.log('Кермо повернуте направо');\n//   }\n// }\n\n// // Підсистема 4: Колеса мопеда\n// class Wheels {\n//   startMoving() {\n//     console.log('Колеса почали рухатись');\n//   }\n\n//   stopMoving() {\n//     console.log('Колеса зупинились');\n//   }\n// }\n\n// // Facade: спрощений інтерфейс для мопеда Альфа\n// class AlphaMopedFacade {\n//   private readonly engine: Engine;\n//   private readonly lights: Lights;\n//   private readonly handlebar: Handlebar;\n//   private readonly wheels: Wheels;\n\n//   constructor() {\n//     this.engine = new Engine();\n//     this.lights = new Lights();\n//     this.handlebar = new Handlebar();\n//     this.wheels = new Wheels();\n//   }\n\n//   startMoped() {\n//     this.lights.turnOn();\n//     this.engine.start();\n//     this.wheels.startMoving();\n//     console.log('Мопед готовий до поїздки');\n//   }\n\n//   stopMoped() {\n//     this.wheels.stopMoving();\n//     this.engine.stop();\n//     this.lights.turnOff();\n//     console.log('Мопед зупинено');\n//   }\n\n//   turnLeft() {\n//     this.handlebar.turnLeft();\n//   }\n\n//   turnRight() {\n//     this.handlebar.turnRight();\n//   }\n// }\n\n// // Клієнтський код\n// const moped = new AlphaMopedFacade();\n\n// moped.startMoped(); // Запуск мопеда\n// moped.turnLeft(); // Поворот наліво\n// moped.stopMoped(); // Зупинка мопеда\n\n// ==============proxy========================================\n// // Інтерфейс, який описує поведінку сервісу\n// interface DataService {\n//   getData(): string;\n// }\n\n// // Реальний сервіс, який містить основну бізнес-логіку\n// class RealDataService implements DataService {\n//   getData(): string {\n//     return 'Дані з сервісу.';\n//   }\n// }\n\n// // Проксі-сервіс, який додає додаткову логіку, наприклад кешування\n// class CachedDataServiceProxy implements DataService {\n//   private readonly realDataService: RealDataService;\n//   private cachedData: string | null = null;\n\n//   constructor(realDataService: RealDataService) {\n//     this.realDataService = realDataService;\n//   }\n\n//   getData(): string {\n//     if (!this.cachedData) {\n//       console.log('Завантаження даних із основного сервісу...');\n//       this.cachedData = this.realDataService.getData();\n//     } else {\n//       console.log('Повернення кешованих даних.');\n//     }\n//     return this.cachedData;\n//   }\n// }\n\n// // Приклад використання\n// const cachedProxy = new CachedDataServiceProxy(new RealDataService());\n\n// function clientCode(data: DataService) {\n//   data.getData();\n// }\n\n// clientCode(cachedProxy); // Завантаження даних із основного сервісу...\n// clientCode(cachedProxy); // Повернення кешованих даних.\n\n// ===========composite=====================================\n// // Абстрактний клас Компонент\n// abstract class Component {\n//   abstract displayDetails(): void;\n//   abstract getPrice(): number;\n// }\n\n// // Конкретний компонент: частина мопеда\n// class MopedPart extends Component {\n//   private readonly name: string;\n//   private readonly price: number;\n\n//   constructor(name: string, price: number) {\n//     super();\n//     this.name = name;\n//     this.price = price;\n//   }\n\n//   displayDetails(): void {\n//     console.log(`Part: ${this.name}, Price: ${this.price}₴`);\n//   }\n\n//   getPrice(): number {\n//     return this.price;\n//   }\n// }\n\n// // Композитний компонент: мопед\n// class Moped extends Component {\n//   private readonly name: string;\n//   private readonly parts: Component[] = [];\n\n//   constructor(name: string) {\n//     super();\n//     this.name = name;\n//   }\n\n//   addPart(part: Component): void {\n//     this.parts.push(part);\n//   }\n\n//   removePart(part: Component): void {\n//     const idx = this.parts.indexOf(part);\n//     if (idx !== -1) this.parts.splice(idx, 1);\n//   }\n\n//   displayDetails(): void {\n//     console.log(`Moped: ${this.name}`);\n//     for (const part of this.parts) {\n//       part.displayDetails();\n//     }\n//   }\n\n//   getPrice(): number {\n//     return this.parts.reduce((total, part) => total + part.getPrice(), 0);\n//   }\n// }\n\n// // Використання\n// const alphaMoped = new Moped('Alpha');\n\n// // Додаємо частини мопеда з цінами\n// const frame = new MopedPart('Frame', 1000);\n// const engine = new MopedPart('Engine', 5000);\n// const wheels = new MopedPart('Wheels', 2000);\n// const handlebar = new MopedPart('Handlebar', 50);\n\n// alphaMoped.addPart(frame);\n// alphaMoped.addPart(engine);\n// alphaMoped.addPart(wheels);\n// alphaMoped.addPart(handlebar);\n// // Видаляємо додану частину (наприклад, \"Handlebar\")\n// alphaMoped.removePart(handlebar);\n// // Виведення ієрархії мопеда та загальної ціни\n// alphaMoped.displayDetails();\n// console.log(`Total Price: ${alphaMoped.getPrice()}₴`);\n\n// ===============Flyweight==================================\n// // Інтерфейс Flyweight\n// interface IBook {\n//   id: number;\n//   title: string;\n//   author: string;\n// }\n\n// // Flyweight\n// class Book implements IBook {\n//   constructor(\n//     public readonly id: number,\n//     public readonly title: string,\n//     public readonly author: string\n//   ) {}\n// }\n\n// // Flyweight Factory для кешування книг\n// class BookFactory {\n//   private static readonly bookCache: Map<number, Book> = new Map();\n\n//   static getBook(id: number, title: string, author: string): Book {\n//     if (!this.bookCache.has(id)) {\n//       console.log(`Creating new book: ${title} by ${author}`);\n//       this.bookCache.set(id, new Book(id, title, author));\n//     }\n//     return this.bookCache.get(id)!;\n//   }\n\n//   static getCacheSize(): number {\n//     return this.bookCache.size;\n//   }\n// }\n\n// // Використання\n// const book1 = BookFactory.getBook(1, '1984', 'George Orwell');\n// const book2 = BookFactory.getBook(2, 'To Kill a Mockingbird', 'Harper Lee');\n// const book3 = BookFactory.getBook(1, '1984', 'George Orwell'); // Взято з кешу\n\n// console.log(book1 === book3); // true, оскільки об'єкт береться з кешу\n// console.log(`Cache size: ${BookFactory.getCacheSize()}`); // 2\n\n// ==================================================\n// ---------------behavioral-------------------------\n// ==================================================\n\n// ================Visitor============================\n// Інтерфейс для відвідувача\ninterface FlowerVisitor {\n  visitRose(rose: Rose): void;\n  visitTulip(tulip: Tulip): void;\n  visitDaisy(daisy: Daisy): void;\n}\n\n// Інтерфейс для квітів\ninterface Flower {\n  accept(visitor: FlowerVisitor): void;\n}\n\n// Конкретна квітка: Троянда\nclass Rose implements Flower {\n  constructor(public price: number) {}\n\n  getName(): string {\n    return 'Rose';\n  }\n\n  accept(visitor: FlowerVisitor): void {\n    visitor.visitRose(this);\n  }\n}\n\n// Конкретна квітка: Тюльпан\nclass Tulip implements Flower {\n  constructor(public price: number) {}\n\n  getName(): string {\n    return 'Tulip';\n  }\n\n  accept(visitor: FlowerVisitor): void {\n    visitor.visitTulip(this);\n  }\n}\n\n// Конкретна квітка: Ромашка\nclass Daisy implements Flower {\n  constructor(public price: number) {}\n\n  getName(): string {\n    return 'Daisy';\n  }\n\n  accept(visitor: FlowerVisitor): void {\n    visitor.visitDaisy(this);\n  }\n}\n\n// Конкретний відвідувач для підрахунку вартості букета\nclass PriceCalculatorVisitor implements FlowerVisitor {\n  private totalPrice = 0;\n\n  visitRose(rose: Rose): void {\n    this.totalPrice += rose.price;\n  }\n\n  visitTulip(tulip: Tulip): void {\n    this.totalPrice += tulip.price;\n  }\n\n  visitDaisy(daisy: Daisy): void {\n    this.totalPrice += daisy.price;\n  }\n\n  getTotalPrice(): number {\n    return this.totalPrice;\n  }\n}\n\n// Конкретний відвідувач для створення опису букета\nclass DescriptionVisitor implements FlowerVisitor {\n  private readonly description: string[] = [];\n\n  visitRose(rose: Rose): void {\n    this.description.push(rose.getName());\n  }\n\n  visitTulip(tulip: Tulip): void {\n    this.description.push(tulip.getName());\n  }\n\n  visitDaisy(daisy: Daisy): void {\n    this.description.push(daisy.getName());\n  }\n\n  getDescription(): string {\n    return this.description.join(', ');\n  }\n}\n\n// Використання\nconst bouquetArr: Flower[] = [new Rose(700), new Tulip(200), new Daisy(70)];\n\nconst priceCalculator = new PriceCalculatorVisitor();\nconst descriptionVisitor = new DescriptionVisitor();\n\nfunction clientCode(bouquet: Flower[], visitor: FlowerVisitor) {\n  bouquet.forEach(flower => flower.accept(visitor));\n}\n\nclientCode(bouquetArr, descriptionVisitor);\nclientCode(bouquetArr, priceCalculator);\n\nconsole.log(`Total price of bouquet: ${priceCalculator.getTotalPrice()}$`);\nconsole.log(`Bouquet description: ${descriptionVisitor.getDescription()}.`);\n\n// interface Component {\n//   accept(visitor: Visitor): void;\n// }\n\n// class ConcreteComponentA implements Component {\n//   public accept(visitor: Visitor): void {\n//     visitor.visitConcreteComponentA(this);\n//   }\n\n//   public exclusiveMethodOfConcreteComponentA(): string {\n//     return 'A';\n//   }\n// }\n\n// class ConcreteComponentB implements Component {\n//   public accept(visitor: Visitor): void {\n//     visitor.visitConcreteComponentB(this);\n//   }\n\n//   public specialMethodOfConcreteComponentB(): string {\n//     return 'B';\n//   }\n// }\n\n// interface Visitor {\n//   visitConcreteComponentA(element: ConcreteComponentA): void;\n//   visitConcreteComponentB(element: ConcreteComponentB): void;\n// }\n\n// class ConcreteVisitor1 implements Visitor {\n//   public visitConcreteComponentA(element: ConcreteComponentA): void {\n//     console.log(`${element.exclusiveMethodOfConcreteComponentA()} + ConcreteVisitor1`);\n//   }\n\n//   public visitConcreteComponentB(element: ConcreteComponentB): void {\n//     console.log(`${element.specialMethodOfConcreteComponentB()} + ConcreteVisitor1`);\n//   }\n// }\n\n// class ConcreteVisitor2 implements Visitor {\n//   public visitConcreteComponentA(element: ConcreteComponentA): void {\n//     console.log(`${element.exclusiveMethodOfConcreteComponentA()} + ConcreteVisitor2`);\n//   }\n\n//   public visitConcreteComponentB(element: ConcreteComponentB): void {\n//     console.log(`${element.specialMethodOfConcreteComponentB()} + ConcreteVisitor2`);\n//   }\n// }\n\n// function clientCode(components: Component[], visitor: Visitor) {\n//   for (const component of components) {\n//     component.accept(visitor);\n//   }\n// }\n\n// const components = [new ConcreteComponentA(), new ConcreteComponentB()];\n\n// const visitor1 = new ConcreteVisitor1();\n// clientCode(components, visitor1);\n// console.log('');\n\n// const visitor2 = new ConcreteVisitor2();\n// clientCode(components, visitor2);\n\n// ===========Strategy================================\n// // Інтерфейс стратегії\n// interface PaymentStrategy {\n//   pay(amount: number): void;\n// }\n\n// // Реалізація стратегії оплати через кредитну картку\n// class CreditCardPayment implements PaymentStrategy {\n//   constructor(private readonly cardNumber: string) {}\n\n//   pay(amount: number): void {\n//     console.log(`Оплачено ${amount} грн за допомогою кредитної картки ${this.cardNumber}`);\n//   }\n// }\n\n// // Реалізація стратегії оплати готівкою\n// class CashPayment implements PaymentStrategy {\n//   pay(amount: number): void {\n//     console.log(`Оплачено ${amount} грн готівкою.`);\n//   }\n// }\n\n// // Контекст (користувач стратегії)\n// class PaymentProcessor {\n//   private strategy: PaymentStrategy | null = null;\n\n//   // Метод для встановлення стратегії\n//   setStrategy(strategy: PaymentStrategy): void {\n//     this.strategy = strategy;\n//   }\n\n//   // Виконання оплати\n//   processPayment(amount: number): void {\n//     if (!this.strategy) {\n//       console.log('Стратегію оплати не встановлено');\n//       return;\n//     }\n//     this.strategy.pay(amount);\n//   }\n// }\n\n// // Використання\n// const paymentProcessor = new PaymentProcessor();\n\n// // Оплата через кредитну картку\n// paymentProcessor.setStrategy(new CreditCardPayment('4434567898765432'));\n// paymentProcessor.processPayment(1000);\n\n// // Оплата готівкою\n// paymentProcessor.setStrategy(new CashPayment());\n// paymentProcessor.processPayment(700);\n\n// ============Template Method============================\n// // Абстрактний клас із шаблонним методом\n// abstract class BouquetMaker {\n//   public makeBouquet(): void {\n//     this.prepareBase();\n//     this.addFlowers();\n//     this.addDecorations();\n//     this.wrapBouquet();\n//   }\n\n//   // Спільні кроки\n//   protected prepareBase(): void {\n//     console.log('Підготовка основи для букета...');\n//   }\n\n//   protected wrapBouquet(): void {\n//     console.log('Упаковка букета...');\n//   }\n\n//   // Кроки, які мають реалізовувати підкласи\n//   protected abstract addFlowers(): void;\n//   protected abstract addDecorations(): void;\n// }\n\n// // Клас для класичного букета\n// class ClassicBouquetMaker extends BouquetMaker {\n//   protected addFlowers(): void {\n//     console.log('Додавання троянд та лілій...');\n//   }\n\n//   protected addDecorations(): void {\n//     console.log('Додавання стрічки...');\n//   }\n// }\n\n// // Клас для польового букета\n// class WildBouquetMaker extends BouquetMaker {\n//   protected addFlowers(): void {\n//     console.log('Додавання ромашок, волошок та лаванди...');\n//   }\n\n//   protected addDecorations(): void {\n//     console.log('Додавання сухоцвітів...');\n//   }\n// }\n\n// // Використання\n// const classicBouquet = new ClassicBouquetMaker();\n// console.log('Приготування класичного букета:');\n// classicBouquet.makeBouquet();\n\n// const wildBouquet = new WildBouquetMaker();\n// console.log('\\nПриготування польового букета:');\n// wildBouquet.makeBouquet();\n"],"names":["Rose","price","visitor","Tulip","Daisy","PriceCalculatorVisitor","__publicField","rose","tulip","daisy","DescriptionVisitor","bouquetArr","priceCalculator","descriptionVisitor","clientCode","bouquet","flower"],"mappings":"82BA+uBA,MAAMA,CAAuB,CAC3B,YAAmBC,EAAe,CAAf,KAAA,MAAAA,CAAgB,CAEnC,SAAkB,CACT,MAAA,MACT,CAEA,OAAOC,EAA8B,CACnCA,EAAQ,UAAU,IAAI,CACxB,CACF,CAGA,MAAMC,CAAwB,CAC5B,YAAmBF,EAAe,CAAf,KAAA,MAAAA,CAAgB,CAEnC,SAAkB,CACT,MAAA,OACT,CAEA,OAAOC,EAA8B,CACnCA,EAAQ,WAAW,IAAI,CACzB,CACF,CAGA,MAAME,CAAwB,CAC5B,YAAmBH,EAAe,CAAf,KAAA,MAAAA,CAAgB,CAEnC,SAAkB,CACT,MAAA,OACT,CAEA,OAAOC,EAA8B,CACnCA,EAAQ,WAAW,IAAI,CACzB,CACF,CAGA,MAAMG,CAAgD,CAAtD,cACUC,EAAA,kBAAa,GAErB,UAAUC,EAAkB,CAC1B,KAAK,YAAcA,EAAK,KAC1B,CAEA,WAAWC,EAAoB,CAC7B,KAAK,YAAcA,EAAM,KAC3B,CAEA,WAAWC,EAAoB,CAC7B,KAAK,YAAcA,EAAM,KAC3B,CAEA,eAAwB,CACtB,OAAO,KAAK,UACd,CACF,CAGA,MAAMC,CAA4C,CAAlD,cACmBJ,EAAA,mBAAwB,CAAA,GAEzC,UAAUC,EAAkB,CAC1B,KAAK,YAAY,KAAKA,EAAK,QAAS,CAAA,CACtC,CAEA,WAAWC,EAAoB,CAC7B,KAAK,YAAY,KAAKA,EAAM,QAAS,CAAA,CACvC,CAEA,WAAWC,EAAoB,CAC7B,KAAK,YAAY,KAAKA,EAAM,QAAS,CAAA,CACvC,CAEA,gBAAyB,CAChB,OAAA,KAAK,YAAY,KAAK,IAAI,CACnC,CACF,CAGA,MAAME,EAAuB,CAAC,IAAIX,EAAK,GAAG,EAAG,IAAIG,EAAM,GAAG,EAAG,IAAIC,EAAM,EAAE,CAAC,EAEpEQ,EAAkB,IAAIP,EACtBQ,EAAqB,IAAIH,EAE/B,SAASI,EAAWC,EAAmBb,EAAwB,CAC7Da,EAAQ,QAAQC,GAAUA,EAAO,OAAOd,CAAO,CAAC,CAClD,CAEAY,EAAWH,EAAYE,CAAkB,EACzCC,EAAWH,EAAYC,CAAe,EAEtC,QAAQ,IAAI,2BAA2BA,EAAgB,cAAe,CAAA,GAAG,EACzE,QAAQ,IAAI,wBAAwBC,EAAmB,eAAA,CAAgB,GAAG"}