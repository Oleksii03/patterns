{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["// import './creational/creational';\n// ------------------------------------\n\n// ==================factory-method=========================\n// interface Subscription {\n//   operation(): string;\n// }\n\n// class GamerSubscription implements Subscription {\n//   public operation(): string {\n//     return 'Gamer';\n//   }\n// }\n\n// class PremiumSubscription implements Subscription {\n//   public operation(): string {\n//     return 'Premium';\n//   }\n// }\n\n// abstract class SubscriptionCreator {\n//   public abstract createSubscription(): Subscription;\n\n//   public manageSubscription(): string {\n//     const subscription = this.createSubscription();\n\n//     return `Managing a ${subscription.operation()} subscription`;\n//   }\n// }\n\n// class GamerSubscriptionCreator extends SubscriptionCreator {\n//   public createSubscription(): Subscription {\n//     return new GamerSubscription();\n//   }\n// }\n\n// class PremiumSubscriptionCreator extends SubscriptionCreator {\n//   public createSubscription(): Subscription {\n//     return new PremiumSubscription();\n//   }\n// }\n\n// const gamerSubscriptionCreator = new GamerSubscriptionCreator();\n// console.log(gamerSubscriptionCreator.manageSubscription());\n\n// const premiumSubscriptionCreator = new PremiumSubscriptionCreator();\n// console.log(premiumSubscriptionCreator.manageSubscription());\n\n// =====================singleton==============================\n// interface ApiResponse {\n//   id: number;\n//   name: string;\n//   data: any;\n// }\n\n// export class ApiManager {\n//   private static instance: ApiManager;\n\n//   private constructor() {}\n\n//   public static getInstance(): ApiManager {\n//     if (!ApiManager.instance) {\n//       ApiManager.instance = new ApiManager();\n//     }\n//     return ApiManager.instance;\n//   }\n\n//   public async get(url: string): Promise<any> {\n//     try {\n//       const response = await fetch(url);\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n//       return (await response.json()) as any;\n//     } catch (error) {\n//       console.error('Failed to fetch data:', error);\n//       throw error;\n//     }\n//   }\n// }\n\n// // Використання Singleton для викликів API\n// const apiManager1 = ApiManager.getInstance();\n// const apiManager2 = ApiManager.getInstance();\n\n// export const API_KEY = 'bbcabf34e55a9240d0c44542dbf6e7ac';\n// export const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather';\n\n// apiManager1\n//   .get(`${BASE_URL}?q=Lviv&appid=${API_KEY}&units=metric`)\n//   .then(data => console.log('Data fetched:', data))\n//   .catch(error => console.error('Error fetching data:', error));\n\n// // Перевірка того, що екземпляри є однаковими\n// console.log(apiManager1 === apiManager2); // Виведе: true\n\n// =================builder===============================================\n// interface FlowerBouquetBuilder {\n//   setFlowerType(flowerType: string): this;\n//   setQuantity(quantity: number): this;\n//   setColor(color: string): this;\n//   setNeedsWrapping(needsWrapping: boolean): this;\n//   build(): FlowerBouquet;\n// }\n// class FlowerBouquet {\n//   public flowerType?: string;\n//   public quantity?: number;\n//   public color?: string;\n//   public needsWrapping?: boolean;\n\n//   public describe(): void {\n//     console.log(\n//       `Bouquet details:\\nFlower Type: ${this.flowerType}\\nQuantity: ${this.quantity}\\nColor: ${this.color}\\nNeeds Wrapping: ${this.needsWrapping}`\n//     );\n//   }\n// }\n// class FlowerBouquetBuilderImpl implements FlowerBouquetBuilder {\n//   private bouquet: FlowerBouquet;\n\n//   constructor() {\n//     this.bouquet = new FlowerBouquet();\n//   }\n\n//   public setFlowerType(flowerType: string): this {\n//     this.bouquet.flowerType = flowerType;\n//     return this;\n//   }\n\n//   public setQuantity(quantity: number): this {\n//     this.bouquet.quantity = quantity;\n//     return this;\n//   }\n\n//   public setColor(color: string): this {\n//     this.bouquet.color = color;\n//     return this;\n//   }\n\n//   public setNeedsWrapping(needsWrapping: boolean): this {\n//     this.bouquet.needsWrapping = needsWrapping;\n//     return this;\n//   }\n\n//   public build(): FlowerBouquet {\n//     const result = this.bouquet;\n//     this.reset();\n//     return result;\n//   }\n\n//   private reset(): void {\n//     this.bouquet = new FlowerBouquet();\n//   }\n// }\n\n// // Приклад використання\n// const builder = new FlowerBouquetBuilderImpl();\n\n// const bouquetRoses = builder\n//   .setFlowerType('Roses')\n//   .setQuantity(12)\n//   .setColor('Red')\n//   .setNeedsWrapping(true)\n//   .build();\n\n// bouquetRoses.describe();\n\n// ==========prototype=====================================================\n// class RoseBouquet {\n//   constructor(\n//     public quantity: number,\n//     public color: string,\n//     public needsWrapping: boolean\n//   ) {}\n\n//   clone(): RoseBouquet {\n//     return new RoseBouquet(this.quantity, this.color, this.needsWrapping);\n//   }\n// }\n\n// // Приклад використання\n// const originalBouquet = new RoseBouquet(12, 'Red', true);\n\n// const newBouquet = originalBouquet.clone();\n// newBouquet.quantity = 24;\n\n// console.log(originalBouquet);\n// console.log(newBouquet);\n\n// -------------var-2----------------------------------------------------\n\n// interface Bouquet {\n//   setQuantity(quantity: number): void;\n//   setColor(color: string): void;\n//   setNeedsWrapping(needsWrapping: boolean): void;\n//   clone(): Bouquet;\n// }\n\n// class RoseBouquet implements Bouquet {\n//   constructor(\n//     private quantity: number,\n//     private color: string,\n//     private needsWrapping: boolean\n//   ) {}\n\n//   public setQuantity(quantity: number): void {\n//     this.quantity = quantity;\n//   }\n\n//   public setColor(color: string): void {\n//     this.color = color;\n//   }\n\n//   public setNeedsWrapping(needsWrapping: boolean): void {\n//     this.needsWrapping = needsWrapping;\n//   }\n\n//   public clone(): Bouquet {\n//     return new RoseBouquet(this.quantity, this.color, this.needsWrapping);\n//   }\n// }\n\n// // Приклад використання\n// const originalBouquet: Bouquet = new RoseBouquet(12, 'Red', true);\n// const newBouquet = originalBouquet.clone();\n\n// newBouquet.setQuantity(24);\n// newBouquet.setColor('yellow');\n\n// console.log(originalBouquet);\n// console.log(newBouquet);\n\n// ==========abstract-factory===================================\n// Інтерфейси для продуктів\ninterface ElectricMoped {\n  start(): string;\n}\n\ninterface GasolineMoped {\n  start(): string;\n}\n\n// Реалізації для стилю Futuristic\nclass FuturisticElectricMoped implements ElectricMoped {\n  start(): string {\n    return 'Стартую на футуристичному електромопеді Альфа';\n  }\n}\n\nclass FuturisticGasolineMoped implements GasolineMoped {\n  start(): string {\n    return 'Стартую на футуристичному бензиновому мопеді Альфа';\n  }\n}\n\n// Реалізації для стилю Retro\nclass RetroElectricMoped implements ElectricMoped {\n  start(): string {\n    return 'Стартую на ретро електромопеді Альфа';\n  }\n}\n\nclass RetroGasolineMoped implements GasolineMoped {\n  start(): string {\n    return 'Стартую на ретро бензиновому мопеді Альфа';\n  }\n}\n\n// Абстрактна фабрика\ninterface MopedFactory {\n  createElectricMoped(): ElectricMoped;\n  createGasolineMoped(): GasolineMoped;\n}\n\n// Фабрика для Futuristic стилю\nclass FuturisticMopedFactory implements MopedFactory {\n  createElectricMoped(): ElectricMoped {\n    return new FuturisticElectricMoped();\n  }\n\n  createGasolineMoped(): GasolineMoped {\n    return new FuturisticGasolineMoped();\n  }\n}\n\n// Фабрика для Retro стилю\nclass RetroMopedFactory implements MopedFactory {\n  createElectricMoped(): ElectricMoped {\n    return new RetroElectricMoped();\n  }\n\n  createGasolineMoped(): GasolineMoped {\n    return new RetroGasolineMoped();\n  }\n}\n\n// Клієнтський код\nfunction clientCode(factory: MopedFactory) {\n  const electricMoped = factory.createElectricMoped();\n  const gasolineMoped = factory.createGasolineMoped();\n\n  console.log(electricMoped.start());\n  console.log(gasolineMoped.start());\n}\n\n// Використання\nconst futuristicMopedFactory = new FuturisticMopedFactory();\nconsole.log('Futuristic Mopeds:');\nclientCode(futuristicMopedFactory);\n\nconst retroMopedFactory = new RetroMopedFactory();\nconsole.log('\\nRetro Mopeds:');\nclientCode(retroMopedFactory);\n"],"names":["FuturisticElectricMoped","FuturisticGasolineMoped","RetroElectricMoped","RetroGasolineMoped","FuturisticMopedFactory","RetroMopedFactory","clientCode","factory","electricMoped","gasolineMoped","futuristicMopedFactory","retroMopedFactory"],"mappings":"ssBAkPA,MAAMA,CAAiD,CACrD,OAAgB,CACP,MAAA,+CACT,CACF,CAEA,MAAMC,CAAiD,CACrD,OAAgB,CACP,MAAA,oDACT,CACF,CAGA,MAAMC,CAA4C,CAChD,OAAgB,CACP,MAAA,sCACT,CACF,CAEA,MAAMC,CAA4C,CAChD,OAAgB,CACP,MAAA,2CACT,CACF,CASA,MAAMC,CAA+C,CACnD,qBAAqC,CACnC,OAAO,IAAIJ,CACb,CAEA,qBAAqC,CACnC,OAAO,IAAIC,CACb,CACF,CAGA,MAAMI,CAA0C,CAC9C,qBAAqC,CACnC,OAAO,IAAIH,CACb,CAEA,qBAAqC,CACnC,OAAO,IAAIC,CACb,CACF,CAGA,SAASG,EAAWC,EAAuB,CACnC,MAAAC,EAAgBD,EAAQ,sBACxBE,EAAgBF,EAAQ,sBAEtB,QAAA,IAAIC,EAAc,MAAO,CAAA,EACzB,QAAA,IAAIC,EAAc,MAAO,CAAA,CACnC,CAGA,MAAMC,EAAyB,IAAIN,EACnC,QAAQ,IAAI,oBAAoB,EAChCE,EAAWI,CAAsB,EAEjC,MAAMC,EAAoB,IAAIN,EAC9B,QAAQ,IAAI;AAAA,cAAiB,EAC7BC,EAAWK,CAAiB"}