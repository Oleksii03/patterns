{"version":3,"file":"index.js","sources":["../../src/behavioral/strategy/classes/payment-processor.ts","../../src/behavioral/strategy/classes/credit-card-payment.ts","../../src/behavioral/strategy/classes/cash-payment.ts","../../src/behavioral/strategy/client-code.ts","../../src/behavioral/template-method/classes/bouquet-maker.ts","../../src/behavioral/template-method/classes/classic-bouquet-maker.ts","../../src/behavioral/template-method/classes/wild-bouquet-maker.ts","../../src/behavioral/template-method/client-code.ts","../../src/behavioral/visitor/classes/rose.ts","../../src/behavioral/visitor/classes/tulip.ts","../../src/behavioral/visitor/classes/daisy.ts","../../src/behavioral/visitor/classes/visitors/price-calculator-visitor.ts","../../src/behavioral/visitor/classes/visitors/description-visitor.ts","../../src/behavioral/visitor/client-code.ts","../../src/behavioral/observer/classes/flower-shop.ts","../../src/behavioral/observer/classes/customer.ts","../../src/behavioral/observer/client-code.ts","../../src/index.ts"],"sourcesContent":["import { PaymentStrategy } from '../interfaces/payment-strategy';\n\nexport class PaymentProcessor {\n  private strategy: PaymentStrategy | null = null;\n\n  // Метод для встановлення стратегії\n  setStrategy(strategy: PaymentStrategy): void {\n    this.strategy = strategy;\n  }\n\n  // Виконання оплати\n  processPayment(amount: number): void {\n    if (!this.strategy) {\n      console.log('Стратегію оплати не встановлено');\n      return;\n    }\n    this.strategy.pay(amount);\n  }\n}\n","import { PaymentStrategy } from '../interfaces/payment-strategy';\n\nexport class CreditCardPayment implements PaymentStrategy {\n  constructor(private readonly cardNumber: string) {}\n\n  pay(amount: number): void {\n    console.log(`Оплачено ${amount} грн за допомогою кредитної картки ${this.cardNumber}`);\n  }\n}\n","import { PaymentStrategy } from '../interfaces/payment-strategy';\n\nexport class CashPayment implements PaymentStrategy {\n  pay(amount: number): void {\n    console.log(`Оплачено ${amount} грн готівкою.`);\n  }\n}\n","import { PaymentProcessor } from './classes/payment-processor';\nimport { CreditCardPayment } from './classes/credit-card-payment';\nimport { CashPayment } from './classes/cash-payment';\n\nconst paymentProcessor = new PaymentProcessor();\n\n// Оплата через кредитну картку\npaymentProcessor.setStrategy(new CreditCardPayment('4434567898765432'));\npaymentProcessor.processPayment(1000);\n\n// Оплата готівкою\npaymentProcessor.setStrategy(new CashPayment());\npaymentProcessor.processPayment(700);\n\nconsole.log('-------------------------------------------------');\n","export abstract class BouquetMaker {\n  public makeBouquet(): void {\n    this.prepareBase();\n    this.addFlowers();\n    this.addDecorations();\n    this.wrapBouquet();\n  }\n\n  protected prepareBase(): void {\n    console.log('Підготовка основи для букета...');\n  }\n\n  protected wrapBouquet(): void {\n    console.log('Упаковка букета...');\n  }\n\n  protected abstract addFlowers(): void;\n  protected abstract addDecorations(): void;\n}\n","import { BouquetMaker } from './bouquet-maker';\n\nexport class ClassicBouquetMaker extends BouquetMaker {\n  protected addFlowers(): void {\n    console.log('Додавання троянд та лілій...');\n  }\n\n  protected addDecorations(): void {\n    console.log('Додавання стрічки...');\n  }\n}\n","import { BouquetMaker } from './bouquet-maker';\n\nexport class WildBouquetMaker extends BouquetMaker {\n  protected addFlowers(): void {\n    console.log('Додавання ромашок, волошок та лаванди...');\n  }\n\n  protected addDecorations(): void {\n    console.log('Додавання сухоцвітів...');\n  }\n}\n","import { ClassicBouquetMaker } from './classes/classic-bouquet-maker';\nimport { WildBouquetMaker } from './classes/wild-bouquet-maker';\n\n// Використання\nconst classicBouquet = new ClassicBouquetMaker();\nconsole.log('Приготування класичного букета:');\nclassicBouquet.makeBouquet();\n\nconst wildBouquet = new WildBouquetMaker();\nconsole.log('\\nПриготування польового букета:');\nwildBouquet.makeBouquet();\n\nconsole.log('-------------------------------------------------');\n","import { Flower } from '../interfaces/flower';\n\nexport class Rose implements Flower {\n  constructor(public price: number) {}\n\n  getName(): string {\n    return 'Rose';\n  }\n\n  accept(visitor: FlowerVisitor): void {\n    visitor.visitRose(this);\n  }\n}\n","import { Flower } from '../interfaces/flower';\n\nexport class Tulip implements Flower {\n  constructor(public price: number) {}\n\n  getName(): string {\n    return 'Tulip';\n  }\n\n  accept(visitor: FlowerVisitor): void {\n    visitor.visitTulip(this);\n  }\n}\n","import { Flower } from '../interfaces/flower';\n\nexport class Daisy implements Flower {\n  constructor(public price: number) {}\n\n  getName(): string {\n    return 'Daisy';\n  }\n\n  accept(visitor: FlowerVisitor): void {\n    visitor.visitDaisy(this);\n  }\n}\n","import { FlowerVisitor } from '../../interfaces/flower-visitor';\nimport { Rose } from '../../classes/rose';\nimport { Tulip } from '../../classes/tulip';\nimport { Daisy } from '../../classes/daisy';\n\nexport class PriceCalculatorVisitor implements FlowerVisitor {\n  private totalPrice = 0;\n\n  visitRose(rose: Rose): void {\n    this.totalPrice += rose.price;\n  }\n\n  visitTulip(tulip: Tulip): void {\n    this.totalPrice += tulip.price;\n  }\n\n  visitDaisy(daisy: Daisy): void {\n    this.totalPrice += daisy.price;\n  }\n\n  getTotalPrice(): number {\n    return this.totalPrice;\n  }\n}\n","import { FlowerVisitor } from '../../interfaces/flower-visitor';\nimport { Rose } from '../../classes/rose';\nimport { Tulip } from '../../classes/tulip';\nimport { Daisy } from '../../classes/daisy';\n\nexport class DescriptionVisitor implements FlowerVisitor {\n  private readonly description: string[] = [];\n\n  visitRose(rose: Rose): void {\n    this.description.push(rose.getName());\n  }\n\n  visitTulip(tulip: Tulip): void {\n    this.description.push(tulip.getName());\n  }\n\n  visitDaisy(daisy: Daisy): void {\n    this.description.push(daisy.getName());\n  }\n\n  getDescription(): string {\n    return this.description.join(', ');\n  }\n}\n","// ---classes ---\nimport { Rose } from './classes/rose';\nimport { Tulip } from './classes/tulip';\nimport { Daisy } from './classes/daisy';\nimport { PriceCalculatorVisitor } from './classes/visitors/price-calculator-visitor';\nimport { DescriptionVisitor } from './classes/visitors/description-visitor';\n// --- interfaces ---\nimport { Flower } from './interfaces/flower';\nimport { FlowerVisitor } from './interfaces/flower-visitor';\n// -------/------------\n\nconst bouquetArr: Flower[] = [new Rose(10), new Tulip(7), new Daisy(5)];\n\nconst priceCalculator = new PriceCalculatorVisitor();\nconst descriptionVisitor = new DescriptionVisitor();\n\nfunction clientCode(bouquet: Flower[], visitor: FlowerVisitor) {\n  bouquet.forEach(flower => flower.accept(visitor));\n}\n\nclientCode(bouquetArr, descriptionVisitor);\nclientCode(bouquetArr, priceCalculator);\n\nconsole.log(`Total price of bouquet: ${priceCalculator.getTotalPrice()}$`);\nconsole.log(`Bouquet description: ${descriptionVisitor.getDescription()}.`);\n\nconsole.log('-------------------------------------------------');\n","import { Subject } from '../interfaces/subject';\nimport { Observer } from '../interfaces/i-observer';\n\nexport class FlowerShop implements Subject {\n  private observers: Observer[] = [];\n\n  public addObserver(observer: Observer): void {\n    this.observers.push(observer);\n  }\n\n  public removeObserver(observer: Observer): void {\n    this.observers = this.observers.filter(obs => obs !== observer);\n  }\n\n  public notifyObservers(flowerName: string): void {\n    for (const observer of this.observers) {\n      observer.update(flowerName);\n    }\n  }\n\n  public addNewFlower(flowerName: string): void {\n    console.log(`\\nFlowerShop: Додано нову квітку - ${flowerName}`);\n    this.notifyObservers(flowerName);\n  }\n}\n","import { Observer } from '../interfaces/i-observer';\n\nexport class Customer implements Observer {\n  constructor(private readonly name: string) {}\n\n  public update(flowerName: string): void {\n    console.log(`${this.name}: Сповіщення - доступна нова квітка \"${flowerName}\"`);\n  }\n}\n","import { FlowerShop } from './classes/flower-shop';\nimport { Customer } from './classes/customer';\n\nconst flowerShop = new FlowerShop();\n\nconst customer1 = new Customer('Олена');\nconst customer2 = new Customer('Максим');\nconst customer3 = new Customer('Анна');\n\n// Підписуємо клієнтів\nflowerShop.addObserver(customer1);\nflowerShop.addObserver(customer2);\nflowerShop.addObserver(customer3);\n\n// Додаємо нові квіти\nflowerShop.addNewFlower('Троянда');\nflowerShop.addNewFlower('Орхідея');\n\n// Відписуємо одного з клієнтів\nflowerShop.removeObserver(customer2);\n\n// Додаємо ще одну квітку\nflowerShop.addNewFlower('Лілія');\n","// import './creational/creational';\n// import './structural/structural';\nimport './behavioral/behavioral';\n// ------------------------------------\n\n// ==================factory-method=========================\n// interface Subscription {\n//   operation(): string;\n// }\n\n// class GamerSubscription implements Subscription {\n//   public operation(): string {\n//     return 'Gamer';\n//   }\n// }\n\n// class PremiumSubscription implements Subscription {\n//   public operation(): string {\n//     return 'Premium';\n//   }\n// }\n\n// abstract class SubscriptionCreator {\n//   public abstract createSubscription(): Subscription;\n\n//   public manageSubscription(): string {\n//     const subscription = this.createSubscription();\n\n//     return `Managing a ${subscription.operation()} subscription`;\n//   }\n// }\n\n// class GamerSubscriptionCreator extends SubscriptionCreator {\n//   public createSubscription(): Subscription {\n//     return new GamerSubscription();\n//   }\n// }\n\n// class PremiumSubscriptionCreator extends SubscriptionCreator {\n//   public createSubscription(): Subscription {\n//     return new PremiumSubscription();\n//   }\n// }\n\n// const gamerSubscriptionCreator = new GamerSubscriptionCreator();\n// console.log(gamerSubscriptionCreator.manageSubscription());\n\n// const premiumSubscriptionCreator = new PremiumSubscriptionCreator();\n// console.log(premiumSubscriptionCreator.manageSubscription());\n\n// =====================singleton==============================\n// interface ApiResponse {\n//   id: number;\n//   name: string;\n//   data: any;\n// }\n\n// export class ApiManager {\n//   private static instance: ApiManager;\n\n//   private constructor() {}\n\n//   public static getInstance(): ApiManager {\n//     if (!ApiManager.instance) {\n//       ApiManager.instance = new ApiManager();\n//     }\n//     return ApiManager.instance;\n//   }\n\n//   public async get(url: string): Promise<any> {\n//     try {\n//       const response = await fetch(url);\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n//       return (await response.json()) as any;\n//     } catch (error) {\n//       console.error('Failed to fetch data:', error);\n//       throw error;\n//     }\n//   }\n// }\n\n// // Використання Singleton для викликів API\n// const apiManager1 = ApiManager.getInstance();\n// const apiManager2 = ApiManager.getInstance();\n\n// export const API_KEY = 'bbcabf34e55a9240d0c44542dbf6e7ac';\n// export const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather';\n\n// apiManager1\n//   .get(`${BASE_URL}?q=Lviv&appid=${API_KEY}&units=metric`)\n//   .then(data => console.log('Data fetched:', data))\n//   .catch(error => console.error('Error fetching data:', error));\n\n// // Перевірка того, що екземпляри є однаковими\n// console.log(apiManager1 === apiManager2); // Виведе: true\n\n// =================builder===============================================\n// interface FlowerBouquetBuilder {\n//   setFlowerType(flowerType: string): this;\n//   setQuantity(quantity: number): this;\n//   setColor(color: string): this;\n//   setNeedsWrapping(needsWrapping: boolean): this;\n//   build(): FlowerBouquet;\n// }\n// class FlowerBouquet {\n//   public flowerType?: string;\n//   public quantity?: number;\n//   public color?: string;\n//   public needsWrapping?: boolean;\n\n//   public describe(): void {\n//     console.log(\n//       `Bouquet details:\\nFlower Type: ${this.flowerType}\\nQuantity: ${this.quantity}\\nColor: ${this.color}\\nNeeds Wrapping: ${this.needsWrapping}`\n//     );\n//   }\n// }\n// class FlowerBouquetBuilderImpl implements FlowerBouquetBuilder {\n//   private bouquet: FlowerBouquet;\n\n//   constructor() {\n//     this.bouquet = new FlowerBouquet();\n//   }\n\n//   public setFlowerType(flowerType: string): this {\n//     this.bouquet.flowerType = flowerType;\n//     return this;\n//   }\n\n//   public setQuantity(quantity: number): this {\n//     this.bouquet.quantity = quantity;\n//     return this;\n//   }\n\n//   public setColor(color: string): this {\n//     this.bouquet.color = color;\n//     return this;\n//   }\n\n//   public setNeedsWrapping(needsWrapping: boolean): this {\n//     this.bouquet.needsWrapping = needsWrapping;\n//     return this;\n//   }\n\n//   public build(): FlowerBouquet {\n//     const result = this.bouquet;\n//     this.reset();\n//     return result;\n//   }\n\n//   private reset(): void {\n//     this.bouquet = new FlowerBouquet();\n//   }\n// }\n\n// // Приклад використання\n// const builder = new FlowerBouquetBuilderImpl();\n\n// const bouquetRoses = builder\n//   .setFlowerType('Roses')\n//   .setQuantity(12)\n//   .setColor('Red')\n//   .setNeedsWrapping(true)\n//   .build();\n\n// bouquetRoses.describe();\n\n// ==========prototype=====================================================\n// class RoseBouquet {\n//   constructor(\n//     public quantity: number,\n//     public color: string,\n//     public needsWrapping: boolean\n//   ) {}\n\n//   clone(): RoseBouquet {\n//     return new RoseBouquet(this.quantity, this.color, this.needsWrapping);\n//   }\n// }\n\n// // Приклад використання\n// const originalBouquet = new RoseBouquet(12, 'Red', true);\n\n// const newBouquet = originalBouquet.clone();\n// newBouquet.quantity = 24;\n\n// console.log(originalBouquet);\n// console.log(newBouquet);\n\n// -------------var-2----------------------------------------------------\n\n// interface Bouquet {\n//   setQuantity(quantity: number): void;\n//   setColor(color: string): void;\n//   setNeedsWrapping(needsWrapping: boolean): void;\n//   clone(): Bouquet;\n// }\n\n// class RoseBouquet implements Bouquet {\n//   constructor(\n//     private quantity: number,\n//     private color: string,\n//     private needsWrapping: boolean\n//   ) {}\n\n//   public setQuantity(quantity: number): void {\n//     this.quantity = quantity;\n//   }\n\n//   public setColor(color: string): void {\n//     this.color = color;\n//   }\n\n//   public setNeedsWrapping(needsWrapping: boolean): void {\n//     this.needsWrapping = needsWrapping;\n//   }\n\n//   public clone(): Bouquet {\n//     return new RoseBouquet(this.quantity, this.color, this.needsWrapping);\n//   }\n// }\n\n// // Приклад використання\n// const originalBouquet: Bouquet = new RoseBouquet(12, 'Red', true);\n// const newBouquet = originalBouquet.clone();\n\n// newBouquet.setQuantity(24);\n// newBouquet.setColor('yellow');\n\n// console.log(originalBouquet);\n// console.log(newBouquet);\n\n// ==========abstract-factory===================================\n// Інтерфейси для продуктів\n// interface ElectricMoped {\n//   start(): string;\n// }\n\n// interface GasolineMoped {\n//   start(): string;\n// }\n\n// // Реалізації для стилю Futuristic\n// class FuturisticElectricMoped implements ElectricMoped {\n//   start(): string {\n//     return 'Стартую на футуристичному електромопеді Альфа';\n//   }\n// }\n\n// class FuturisticGasolineMoped implements GasolineMoped {\n//   start(): string {\n//     return 'Стартую на футуристичному бензиновому мопеді Альфа';\n//   }\n// }\n\n// // Реалізації для стилю Retro\n// class RetroElectricMoped implements ElectricMoped {\n//   start(): string {\n//     return 'Стартую на ретро електромопеді Альфа';\n//   }\n// }\n\n// class RetroGasolineMoped implements GasolineMoped {\n//   start(): string {\n//     return 'Стартую на ретро бензиновому мопеді Альфа';\n//   }\n// }\n\n// // Абстрактна фабрика\n// interface MopedFactory {\n//   createElectricMoped(): ElectricMoped;\n//   createGasolineMoped(): GasolineMoped;\n// }\n\n// // Фабрика для Futuristic стилю\n// class FuturisticMopedFactory implements MopedFactory {\n//   createElectricMoped(): ElectricMoped {\n//     return new FuturisticElectricMoped();\n//   }\n\n//   createGasolineMoped(): GasolineMoped {\n//     return new FuturisticGasolineMoped();\n//   }\n// }\n\n// // Фабрика для Retro стилю\n// class RetroMopedFactory implements MopedFactory {\n//   createElectricMoped(): ElectricMoped {\n//     return new RetroElectricMoped();\n//   }\n\n//   createGasolineMoped(): GasolineMoped {\n//     return new RetroGasolineMoped();\n//   }\n// }\n\n// // Клієнтський код\n// function clientCode(factory: MopedFactory) {\n//   const electricMoped = factory.createElectricMoped();\n//   const gasolineMoped = factory.createGasolineMoped();\n\n//   console.log(electricMoped.start());\n//   console.log(gasolineMoped.start());\n// }\n\n// // Використання\n// const futuristicMopedFactory = new FuturisticMopedFactory();\n// console.log('Futuristic Mopeds:');\n// clientCode(futuristicMopedFactory);\n\n// const retroMopedFactory = new RetroMopedFactory();\n// console.log('\\nRetro Mopeds:');\n// clientCode(retroMopedFactory);\n\n// ==============adapter=========================================\n// interface PcGame {\n//   launch(): string;\n// }\n\n// // Клас, що описує стару гру для приставки\n// class ConsoleGame {\n//   startOnConsole(): string {\n//     return 'Гра для старої приставки.';\n//   }\n// }\n\n// // Адаптер, який дозволяє запустити гру на ПК\n// class ConsoleToPcAdapter implements PcGame {\n//   private readonly consoleGame: ConsoleGame;\n\n//   constructor(consoleGame: ConsoleGame) {\n//     this.consoleGame = consoleGame;\n//   }\n\n//   launch(): string {\n//     return `${this.consoleGame.startOnConsole()} (адаптовано для запуску на ПК)`;\n//   }\n// }\n\n// // Використання\n// const consoleGame = new ConsoleGame();\n// const pcGameAdapter = new ConsoleToPcAdapter(consoleGame);\n\n// console.log(pcGameAdapter.launch());\n\n// =========decorator===========================================\n// Базовий інтерфейс\n// interface Player {\n//   getStats(): string;\n//   getProtectionLevel(): number;\n// }\n\n// // Конкретний компонент: базовий герой\n// class BasicPlayer implements Player {\n//   getStats(): string {\n//     return 'Player: Basic equipment';\n//   }\n\n//   getProtectionLevel(): number {\n//     return 0; // Початковий рівень захисту\n//   }\n// }\n\n// // Базовий декоратор\n// class PlayerDecorator implements Player {\n//   protected player: Player;\n\n//   constructor(player: Player) {\n//     this.player = player;\n//   }\n\n//   getStats(): string {\n//     return this.player.getStats();\n//   }\n\n//   getProtectionLevel(): number {\n//     return this.player.getProtectionLevel();\n//   }\n// }\n\n// // Декоратор: додавання бронежилета\n// class ArmorDecorator extends PlayerDecorator {\n//   getStats(): string {\n//     return `${super.getStats()} + Armor`;\n//   }\n\n//   getProtectionLevel(): number {\n//     return super.getProtectionLevel() + 50; // Додаємо 50 одиниць захисту\n//   }\n// }\n\n// // Декоратор: додавання каски\n// class HelmetDecorator extends PlayerDecorator {\n//   getStats(): string {\n//     return `${super.getStats()} + Helmet`;\n//   }\n\n//   getProtectionLevel(): number {\n//     return super.getProtectionLevel() + 25; // Додаємо 25 одиниць захисту\n//   }\n// }\n\n// // Використання\n// const basicPlayer = new BasicPlayer();\n// console.log(\n//   'Базовий гравець:',\n//   basicPlayer.getStats(),\n//   '| Захист:',\n//   basicPlayer.getProtectionLevel()\n// );\n\n// const playerWithArmor = new ArmorDecorator(basicPlayer);\n// console.log(\n//   'Гравець з бронежилетом:',\n//   playerWithArmor.getStats(),\n//   '| Захист:',\n//   playerWithArmor.getProtectionLevel()\n// );\n\n// const playerWithArmorAndHelmet = new HelmetDecorator(playerWithArmor);\n// console.log(\n//   'Гравець з бронежилетом і каскою:',\n//   playerWithArmorAndHelmet.getStats(),\n//   '| Захист:',\n//   playerWithArmorAndHelmet.getProtectionLevel()\n// );\n\n// ===============bridge======================================\n// // інтерфейс\n// interface Color {\n//   applyColor(): string;\n// }\n\n// class RedColor implements Color {\n//   applyColor() {\n//     return 'червоного кольору.';\n//   }\n// }\n\n// class BlueColor implements Color {\n//   applyColor() {\n//     return 'синього кольору.';\n//   }\n// }\n\n// // Абстракція для моделі мопеда\n// abstract class Moped {\n//   protected color: Color;\n\n//   constructor(color: Color) {\n//     this.color = color;\n//   }\n\n//   abstract displayDetails(): string;\n// }\n\n// // Конкретні моделі мопедів\n// class AlphaMoped extends Moped {\n//   displayDetails() {\n//     return `Мопед Альфа ${this.color.applyColor()}`;\n//   }\n// }\n\n// class KarpatyMoped extends Moped {\n//   displayDetails() {\n//     return `Мопед Карпати ${this.color.applyColor()}`;\n//   }\n// }\n\n// // Використання\n// const alphaRed = new AlphaMoped(new RedColor());\n// const karpatyBlue = new KarpatyMoped(new BlueColor());\n\n// function getDetails(moped: Moped) {\n//   const result = moped.displayDetails();\n//   console.log(result);\n// }\n\n// getDetails(karpatyBlue);\n// getDetails(alphaRed);\n\n// ===============facade=====================================\n// // Підсистема 1: Двигун мопеда\n// class Engine {\n//   start() {\n//     console.log('Двигун запущено');\n//   }\n\n//   stop() {\n//     console.log('Двигун зупинено');\n//   }\n// }\n\n// // Підсистема 2: Ліхтарі мопеда\n// class Lights {\n//   turnOn() {\n//     console.log('Ліхтарі включені');\n//   }\n\n//   turnOff() {\n//     console.log('Ліхтарі вимкнено');\n//   }\n// }\n\n// // Підсистема 3: Кермо мопеда\n// class Handlebar {\n//   turnLeft() {\n//     console.log('Кермо повернуте наліво');\n//   }\n\n//   turnRight() {\n//     console.log('Кермо повернуте направо');\n//   }\n// }\n\n// // Підсистема 4: Колеса мопеда\n// class Wheels {\n//   startMoving() {\n//     console.log('Колеса почали рухатись');\n//   }\n\n//   stopMoving() {\n//     console.log('Колеса зупинились');\n//   }\n// }\n\n// // Facade: спрощений інтерфейс для мопеда Альфа\n// class AlphaMopedFacade {\n//   private readonly engine: Engine;\n//   private readonly lights: Lights;\n//   private readonly handlebar: Handlebar;\n//   private readonly wheels: Wheels;\n\n//   constructor() {\n//     this.engine = new Engine();\n//     this.lights = new Lights();\n//     this.handlebar = new Handlebar();\n//     this.wheels = new Wheels();\n//   }\n\n//   startMoped() {\n//     this.lights.turnOn();\n//     this.engine.start();\n//     this.wheels.startMoving();\n//     console.log('Мопед готовий до поїздки');\n//   }\n\n//   stopMoped() {\n//     this.wheels.stopMoving();\n//     this.engine.stop();\n//     this.lights.turnOff();\n//     console.log('Мопед зупинено');\n//   }\n\n//   turnLeft() {\n//     this.handlebar.turnLeft();\n//   }\n\n//   turnRight() {\n//     this.handlebar.turnRight();\n//   }\n// }\n\n// // Клієнтський код\n// const moped = new AlphaMopedFacade();\n\n// moped.startMoped(); // Запуск мопеда\n// moped.turnLeft(); // Поворот наліво\n// moped.stopMoped(); // Зупинка мопеда\n\n// ==============proxy========================================\n// // Інтерфейс, який описує поведінку сервісу\n// interface DataService {\n//   getData(): string;\n// }\n\n// // Реальний сервіс, який містить основну бізнес-логіку\n// class RealDataService implements DataService {\n//   getData(): string {\n//     return 'Дані з сервісу.';\n//   }\n// }\n\n// // Проксі-сервіс, який додає додаткову логіку, наприклад кешування\n// class CachedDataServiceProxy implements DataService {\n//   private readonly realDataService: RealDataService;\n//   private cachedData: string | null = null;\n\n//   constructor(realDataService: RealDataService) {\n//     this.realDataService = realDataService;\n//   }\n\n//   getData(): string {\n//     if (!this.cachedData) {\n//       console.log('Завантаження даних із основного сервісу...');\n//       this.cachedData = this.realDataService.getData();\n//     } else {\n//       console.log('Повернення кешованих даних.');\n//     }\n//     return this.cachedData;\n//   }\n// }\n\n// // Приклад використання\n// const cachedProxy = new CachedDataServiceProxy(new RealDataService());\n\n// function clientCode(data: DataService) {\n//   data.getData();\n// }\n\n// clientCode(cachedProxy); // Завантаження даних із основного сервісу...\n// clientCode(cachedProxy); // Повернення кешованих даних.\n\n// ===========composite=====================================\n// // Абстрактний клас Компонент\n// abstract class Component {\n//   abstract displayDetails(): void;\n//   abstract getPrice(): number;\n// }\n\n// // Конкретний компонент: частина мопеда\n// class MopedPart extends Component {\n//   private readonly name: string;\n//   private readonly price: number;\n\n//   constructor(name: string, price: number) {\n//     super();\n//     this.name = name;\n//     this.price = price;\n//   }\n\n//   displayDetails(): void {\n//     console.log(`Part: ${this.name}, Price: ${this.price}₴`);\n//   }\n\n//   getPrice(): number {\n//     return this.price;\n//   }\n// }\n\n// // Композитний компонент: мопед\n// class Moped extends Component {\n//   private readonly name: string;\n//   private readonly parts: Component[] = [];\n\n//   constructor(name: string) {\n//     super();\n//     this.name = name;\n//   }\n\n//   addPart(part: Component): void {\n//     this.parts.push(part);\n//   }\n\n//   removePart(part: Component): void {\n//     const idx = this.parts.indexOf(part);\n//     if (idx !== -1) this.parts.splice(idx, 1);\n//   }\n\n//   displayDetails(): void {\n//     console.log(`Moped: ${this.name}`);\n//     for (const part of this.parts) {\n//       part.displayDetails();\n//     }\n//   }\n\n//   getPrice(): number {\n//     return this.parts.reduce((total, part) => total + part.getPrice(), 0);\n//   }\n// }\n\n// // Використання\n// const alphaMoped = new Moped('Alpha');\n\n// // Додаємо частини мопеда з цінами\n// const frame = new MopedPart('Frame', 1000);\n// const engine = new MopedPart('Engine', 5000);\n// const wheels = new MopedPart('Wheels', 2000);\n// const handlebar = new MopedPart('Handlebar', 50);\n\n// alphaMoped.addPart(frame);\n// alphaMoped.addPart(engine);\n// alphaMoped.addPart(wheels);\n// alphaMoped.addPart(handlebar);\n// // Видаляємо додану частину (наприклад, \"Handlebar\")\n// alphaMoped.removePart(handlebar);\n// // Виведення ієрархії мопеда та загальної ціни\n// alphaMoped.displayDetails();\n// console.log(`Total Price: ${alphaMoped.getPrice()}₴`);\n\n// ===============Flyweight==================================\n// // Інтерфейс Flyweight\n// interface IBook {\n//   id: number;\n//   title: string;\n//   author: string;\n// }\n\n// // Flyweight\n// class Book implements IBook {\n//   constructor(\n//     public readonly id: number,\n//     public readonly title: string,\n//     public readonly author: string\n//   ) {}\n// }\n\n// // Flyweight Factory для кешування книг\n// class BookFactory {\n//   private static readonly bookCache: Map<number, Book> = new Map();\n\n//   static getBook(id: number, title: string, author: string = 'user'): Book {\n//     if (!this.bookCache.has(id)) {\n//       console.log(`Creating new book: ${title} by ${author}`);\n//       this.bookCache.set(id, new Book(id, title, author));\n//     }\n//     return this.bookCache.get(id)!;\n//   }\n\n//   static getCacheSize(): number {\n//     return this.bookCache.size;\n//   }\n// }\n\n// // Використання\n// const book1 = BookFactory.getBook(1, '1984', 'George Orwell');\n// const book2 = BookFactory.getBook(2, 'To Kill a Mockingbird', 'Harper Lee');\n// const book3 = BookFactory.getBook(1, '1984', 'George Orwell'); // Взято з кешу\n\n// console.log(book1 === book3); // true, оскільки об'єкт береться з кешу\n// console.log(`Cache size: ${BookFactory.getCacheSize()}`); // 2\n\n// ==================================================\n// ---------------behavioral-------------------------\n// ==================================================\n\n// ===========Strategy================================\n// // Інтерфейс стратегії\n// interface PaymentStrategy {\n//   pay(amount: number): void;\n// }\n\n// // Реалізація стратегії оплати через кредитну картку\n// class CreditCardPayment implements PaymentStrategy {\n//   constructor(private readonly cardNumber: string) {}\n\n//   pay(amount: number): void {\n//     console.log(`Оплачено ${amount} грн за допомогою кредитної картки ${this.cardNumber}`);\n//   }\n// }\n\n// // Реалізація стратегії оплати готівкою\n// class CashPayment implements PaymentStrategy {\n//   pay(amount: number): void {\n//     console.log(`Оплачено ${amount} грн готівкою.`);\n//   }\n// }\n\n// // Контекст (користувач стратегії)\n// class PaymentProcessor {\n//   private strategy: PaymentStrategy | null = null;\n\n//   // Метод для встановлення стратегії\n//   setStrategy(strategy: PaymentStrategy): void {\n//     this.strategy = strategy;\n//   }\n\n//   // Виконання оплати\n//   processPayment(amount: number): void {\n//     if (!this.strategy) {\n//       console.log('Стратегію оплати не встановлено');\n//       return;\n//     }\n//     this.strategy.pay(amount);\n//   }\n// }\n\n// // Використання\n// const paymentProcessor = new PaymentProcessor();\n\n// // Оплата через кредитну картку\n// paymentProcessor.setStrategy(new CreditCardPayment('4434567898765432'));\n// paymentProcessor.processPayment(1000);\n\n// // Оплата готівкою\n// paymentProcessor.setStrategy(new CashPayment());\n// paymentProcessor.processPayment(700);\n\n// ============Template Method============================\n// // Абстрактний клас із шаблонним методом\n// abstract class BouquetMaker {\n//   public makeBouquet(): void {\n//     this.prepareBase();\n//     this.addFlowers();\n//     this.addDecorations();\n//     this.wrapBouquet();\n//   }\n\n//   // Спільні кроки\n//   protected prepareBase(): void {\n//     console.log('Підготовка основи для букета...');\n//   }\n\n//   protected wrapBouquet(): void {\n//     console.log('Упаковка букета...');\n//   }\n\n//   // Кроки, які мають реалізовувати підкласи\n//   protected abstract addFlowers(): void;\n//   protected abstract addDecorations(): void;\n// }\n\n// // Клас для класичного букета\n// class ClassicBouquetMaker extends BouquetMaker {\n//   protected addFlowers(): void {\n//     console.log('Додавання троянд та лілій...');\n//   }\n\n//   protected addDecorations(): void {\n//     console.log('Додавання стрічки...');\n//   }\n// }\n\n// // Клас для польового букета\n// class WildBouquetMaker extends BouquetMaker {\n//   protected addFlowers(): void {\n//     console.log('Додавання ромашок, волошок та лаванди...');\n//   }\n\n//   protected addDecorations(): void {\n//     console.log('Додавання сухоцвітів...');\n//   }\n// }\n\n// // Використання\n// const classicBouquet = new ClassicBouquetMaker();\n// console.log('Приготування класичного букета:');\n// classicBouquet.makeBouquet();\n\n// const wildBouquet = new WildBouquetMaker();\n// console.log('\\nПриготування польового букета:');\n// wildBouquet.makeBouquet();\n\n// ================Visitor============================\n// // Інтерфейс для відвідувача\n// interface FlowerVisitor {\n//   visitRose(rose: Rose): void;\n//   visitTulip(tulip: Tulip): void;\n//   visitDaisy(daisy: Daisy): void;\n// }\n\n// // Інтерфейс для квітів\n// interface Flower {\n//   accept(visitor: FlowerVisitor): void;\n// }\n\n// // Конкретна квітка: Троянда\n// class Rose implements Flower {\n//   constructor(public price: number) {}\n\n//   getName(): string {\n//     return 'Rose';\n//   }\n\n//   accept(visitor: FlowerVisitor): void {\n//     visitor.visitRose(this);\n//   }\n// }\n\n// // Конкретна квітка: Тюльпан\n// class Tulip implements Flower {\n//   constructor(public price: number) {}\n\n//   getName(): string {\n//     return 'Tulip';\n//   }\n\n//   accept(visitor: FlowerVisitor): void {\n//     visitor.visitTulip(this);\n//   }\n// }\n\n// // Конкретна квітка: Ромашка\n// class Daisy implements Flower {\n//   constructor(public price: number) {}\n\n//   getName(): string {\n//     return 'Daisy';\n//   }\n\n//   accept(visitor: FlowerVisitor): void {\n//     visitor.visitDaisy(this);\n//   }\n// }\n\n// // Конкретний відвідувач для підрахунку вартості букета\n// class PriceCalculatorVisitor implements FlowerVisitor {\n//   private totalPrice = 0;\n\n//   visitRose(rose: Rose): void {\n//     this.totalPrice += rose.price;\n//   }\n\n//   visitTulip(tulip: Tulip): void {\n//     this.totalPrice += tulip.price;\n//   }\n\n//   visitDaisy(daisy: Daisy): void {\n//     this.totalPrice += daisy.price;\n//   }\n\n//   getTotalPrice(): number {\n//     return this.totalPrice;\n//   }\n// }\n\n// // Конкретний відвідувач для створення опису букета\n// class DescriptionVisitor implements FlowerVisitor {\n//   private readonly description: string[] = [];\n\n//   visitRose(rose: Rose): void {\n//     this.description.push(rose.getName());\n//   }\n\n//   visitTulip(tulip: Tulip): void {\n//     this.description.push(tulip.getName());\n//   }\n\n//   visitDaisy(daisy: Daisy): void {\n//     this.description.push(daisy.getName());\n//   }\n\n//   getDescription(): string {\n//     return this.description.join(', ');\n//   }\n// }\n\n// // Використання\n// const bouquetArr: Flower[] = [new Rose(700), new Tulip(200), new Daisy(70)];\n\n// const priceCalculator = new PriceCalculatorVisitor();\n// const descriptionVisitor = new DescriptionVisitor();\n\n// function clientCode(bouquet: Flower[], visitor: FlowerVisitor) {\n//   bouquet.forEach(flower => flower.accept(visitor));\n// }\n\n// clientCode(bouquetArr, descriptionVisitor);\n// clientCode(bouquetArr, priceCalculator);\n\n// console.log(`Загальна вартість букета: ${priceCalculator.getTotalPrice()}грн.`);\n// console.log(`Опис букета: ${descriptionVisitor.getDescription()}.`);\n\n// ================Mediator============================\n// // Інтерфейс Посередника\n// interface Mediator {\n//   notify(sender: object, message: string): void;\n// }\n\n// // Конкретний Посередник\n// class WebMediator implements Mediator {\n//   private readonly frontend: Frontend;\n//   private readonly backend: Backend;\n\n//   constructor(frontend: Frontend, backend: Backend) {\n//     this.frontend = frontend;\n//     this.frontend.setMediator(this);\n\n//     this.backend = backend;\n//     this.backend.setMediator(this);\n//   }\n\n//   notify(sender: object, message: string): void {\n//     switch (sender) {\n//       case this.frontend:\n//         console.log('Посередник: Frontend надсилає повідомлення до Backend.');\n//         this.backend.receiveMessage(message);\n//         break;\n//       case this.backend:\n//         console.log('Посередник: Backend надсилає повідомлення до Frontend.');\n//         this.frontend.receiveMessage(message);\n//         break;\n//       default:\n//         console.log('Посередник: Невідоме джерело повідомлення.');\n//     }\n//   }\n// }\n\n// // Базовий клас для компонентів\n// class BaseComponent {\n//   protected mediator: Mediator | null = null;\n\n//   setMediator(mediator: Mediator): void {\n//     this.mediator = mediator;\n//   }\n// }\n\n// // Конкретні компоненти\n// class Frontend extends BaseComponent {\n//   sendMessage(message: string): void {\n//     console.log(`Frontend: Sending message: \"${message}\"`);\n//     if (this.mediator) {\n//       this.mediator.notify(this, message);\n//     }\n//   }\n\n//   receiveMessage(message: string): void {\n//     console.log(`Frontend: Received message: \"${message}\"`);\n//   }\n// }\n\n// class Backend extends BaseComponent {\n//   sendMessage(message: string): void {\n//     console.log(`Backend: Sending message: \"${message}\"`);\n//     if (this.mediator) {\n//       this.mediator.notify(this, message);\n//     }\n//   }\n\n//   receiveMessage(message: string): void {\n//     console.log(`Backend: Received message: \"${message}\"`);\n//   }\n// }\n\n// // Використання\n// const frontend = new Frontend();\n// const backend = new Backend();\n\n// const mediator = new WebMediator(frontend, backend);\n\n// console.log('Клієнт: Frontend надсилає повідомлення.');\n// frontend.sendMessage('Hello from Frontend!');\n\n// console.log('\\nКлієнт: Backend надсилає повідомлення.');\n// backend.sendMessage('Hello from Backend!');\n\n// ==================Observer================================\n// Інтерфейс спостерігача (підписника)\ninterface Observer {\n  update(flowerName: string): void;\n}\n\n// Інтерфейс суб'єкта (магазину)\ninterface Subject {\n  addObserver(observer: Observer): void;\n  removeObserver(observer: Observer): void;\n  notifyObservers(flowerName: string): void;\n}\n\n// Реалізація суб'єкта (Інтернет-магазин)\nclass FlowerShop implements Subject {\n  private observers: Observer[] = [];\n\n  public addObserver(observer: Observer): void {\n    this.observers.push(observer);\n  }\n\n  public removeObserver(observer: Observer): void {\n    this.observers = this.observers.filter(obs => obs !== observer);\n  }\n\n  public notifyObservers(flowerName: string): void {\n    for (const observer of this.observers) {\n      observer.update(flowerName);\n    }\n  }\n\n  public addNewFlower(flowerName: string): void {\n    console.log(`\\nFlowerShop: Додано нову квітку - ${flowerName}`);\n    this.notifyObservers(flowerName);\n  }\n}\n\n// Реалізація спостерігача (Клієнта)\nclass Customer implements Observer {\n  constructor(private readonly name: string) {}\n\n  public update(flowerName: string): void {\n    console.log(`${this.name}: Сповіщення - доступна нова квітка \"${flowerName}\"`);\n  }\n}\n\n// Використання\nconst flowerShop = new FlowerShop();\n\nconst customer1 = new Customer('Олена');\nconst customer2 = new Customer('Максим');\nconst customer3 = new Customer('Анна');\n\n// Підписуємо клієнтів\nflowerShop.addObserver(customer1);\nflowerShop.addObserver(customer2);\nflowerShop.addObserver(customer3);\n\n// Додаємо нові квіти\nflowerShop.addNewFlower('Троянда');\nflowerShop.addNewFlower('Орхідея');\n\n// Відписуємо одного з клієнтів\nflowerShop.removeObserver(customer2);\n\n// Додаємо ще одну квітку\nflowerShop.addNewFlower('Лілія');\n"],"names":["PaymentProcessor","__publicField","strategy","amount","CreditCardPayment","cardNumber","CashPayment","paymentProcessor","BouquetMaker","ClassicBouquetMaker","WildBouquetMaker","classicBouquet","wildBouquet","Rose","price","visitor","Tulip","Daisy","PriceCalculatorVisitor","rose","tulip","daisy","DescriptionVisitor","bouquetArr","priceCalculator","descriptionVisitor","clientCode","bouquet","flower","FlowerShop$1","observer","obs","flowerName","Customer$1","name","flowerShop","FlowerShop","customer1","Customer","customer2","customer3"],"mappings":"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"}