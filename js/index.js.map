{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["// import './creational/creational';\n// import './structural/structural';\n// ------------------------------------\n\nimport { l } from 'vite/dist/node/types.d-aGj9QkWt';\n\n// ==================factory-method=========================\n// interface Subscription {\n//   operation(): string;\n// }\n\n// class GamerSubscription implements Subscription {\n//   public operation(): string {\n//     return 'Gamer';\n//   }\n// }\n\n// class PremiumSubscription implements Subscription {\n//   public operation(): string {\n//     return 'Premium';\n//   }\n// }\n\n// abstract class SubscriptionCreator {\n//   public abstract createSubscription(): Subscription;\n\n//   public manageSubscription(): string {\n//     const subscription = this.createSubscription();\n\n//     return `Managing a ${subscription.operation()} subscription`;\n//   }\n// }\n\n// class GamerSubscriptionCreator extends SubscriptionCreator {\n//   public createSubscription(): Subscription {\n//     return new GamerSubscription();\n//   }\n// }\n\n// class PremiumSubscriptionCreator extends SubscriptionCreator {\n//   public createSubscription(): Subscription {\n//     return new PremiumSubscription();\n//   }\n// }\n\n// const gamerSubscriptionCreator = new GamerSubscriptionCreator();\n// console.log(gamerSubscriptionCreator.manageSubscription());\n\n// const premiumSubscriptionCreator = new PremiumSubscriptionCreator();\n// console.log(premiumSubscriptionCreator.manageSubscription());\n\n// =====================singleton==============================\n// interface ApiResponse {\n//   id: number;\n//   name: string;\n//   data: any;\n// }\n\n// export class ApiManager {\n//   private static instance: ApiManager;\n\n//   private constructor() {}\n\n//   public static getInstance(): ApiManager {\n//     if (!ApiManager.instance) {\n//       ApiManager.instance = new ApiManager();\n//     }\n//     return ApiManager.instance;\n//   }\n\n//   public async get(url: string): Promise<any> {\n//     try {\n//       const response = await fetch(url);\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n//       return (await response.json()) as any;\n//     } catch (error) {\n//       console.error('Failed to fetch data:', error);\n//       throw error;\n//     }\n//   }\n// }\n\n// // Використання Singleton для викликів API\n// const apiManager1 = ApiManager.getInstance();\n// const apiManager2 = ApiManager.getInstance();\n\n// export const API_KEY = 'bbcabf34e55a9240d0c44542dbf6e7ac';\n// export const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather';\n\n// apiManager1\n//   .get(`${BASE_URL}?q=Lviv&appid=${API_KEY}&units=metric`)\n//   .then(data => console.log('Data fetched:', data))\n//   .catch(error => console.error('Error fetching data:', error));\n\n// // Перевірка того, що екземпляри є однаковими\n// console.log(apiManager1 === apiManager2); // Виведе: true\n\n// =================builder===============================================\n// interface FlowerBouquetBuilder {\n//   setFlowerType(flowerType: string): this;\n//   setQuantity(quantity: number): this;\n//   setColor(color: string): this;\n//   setNeedsWrapping(needsWrapping: boolean): this;\n//   build(): FlowerBouquet;\n// }\n// class FlowerBouquet {\n//   public flowerType?: string;\n//   public quantity?: number;\n//   public color?: string;\n//   public needsWrapping?: boolean;\n\n//   public describe(): void {\n//     console.log(\n//       `Bouquet details:\\nFlower Type: ${this.flowerType}\\nQuantity: ${this.quantity}\\nColor: ${this.color}\\nNeeds Wrapping: ${this.needsWrapping}`\n//     );\n//   }\n// }\n// class FlowerBouquetBuilderImpl implements FlowerBouquetBuilder {\n//   private bouquet: FlowerBouquet;\n\n//   constructor() {\n//     this.bouquet = new FlowerBouquet();\n//   }\n\n//   public setFlowerType(flowerType: string): this {\n//     this.bouquet.flowerType = flowerType;\n//     return this;\n//   }\n\n//   public setQuantity(quantity: number): this {\n//     this.bouquet.quantity = quantity;\n//     return this;\n//   }\n\n//   public setColor(color: string): this {\n//     this.bouquet.color = color;\n//     return this;\n//   }\n\n//   public setNeedsWrapping(needsWrapping: boolean): this {\n//     this.bouquet.needsWrapping = needsWrapping;\n//     return this;\n//   }\n\n//   public build(): FlowerBouquet {\n//     const result = this.bouquet;\n//     this.reset();\n//     return result;\n//   }\n\n//   private reset(): void {\n//     this.bouquet = new FlowerBouquet();\n//   }\n// }\n\n// // Приклад використання\n// const builder = new FlowerBouquetBuilderImpl();\n\n// const bouquetRoses = builder\n//   .setFlowerType('Roses')\n//   .setQuantity(12)\n//   .setColor('Red')\n//   .setNeedsWrapping(true)\n//   .build();\n\n// bouquetRoses.describe();\n\n// ==========prototype=====================================================\n// class RoseBouquet {\n//   constructor(\n//     public quantity: number,\n//     public color: string,\n//     public needsWrapping: boolean\n//   ) {}\n\n//   clone(): RoseBouquet {\n//     return new RoseBouquet(this.quantity, this.color, this.needsWrapping);\n//   }\n// }\n\n// // Приклад використання\n// const originalBouquet = new RoseBouquet(12, 'Red', true);\n\n// const newBouquet = originalBouquet.clone();\n// newBouquet.quantity = 24;\n\n// console.log(originalBouquet);\n// console.log(newBouquet);\n\n// -------------var-2----------------------------------------------------\n\n// interface Bouquet {\n//   setQuantity(quantity: number): void;\n//   setColor(color: string): void;\n//   setNeedsWrapping(needsWrapping: boolean): void;\n//   clone(): Bouquet;\n// }\n\n// class RoseBouquet implements Bouquet {\n//   constructor(\n//     private quantity: number,\n//     private color: string,\n//     private needsWrapping: boolean\n//   ) {}\n\n//   public setQuantity(quantity: number): void {\n//     this.quantity = quantity;\n//   }\n\n//   public setColor(color: string): void {\n//     this.color = color;\n//   }\n\n//   public setNeedsWrapping(needsWrapping: boolean): void {\n//     this.needsWrapping = needsWrapping;\n//   }\n\n//   public clone(): Bouquet {\n//     return new RoseBouquet(this.quantity, this.color, this.needsWrapping);\n//   }\n// }\n\n// // Приклад використання\n// const originalBouquet: Bouquet = new RoseBouquet(12, 'Red', true);\n// const newBouquet = originalBouquet.clone();\n\n// newBouquet.setQuantity(24);\n// newBouquet.setColor('yellow');\n\n// console.log(originalBouquet);\n// console.log(newBouquet);\n\n// ==========abstract-factory===================================\n// Інтерфейси для продуктів\n// interface ElectricMoped {\n//   start(): string;\n// }\n\n// interface GasolineMoped {\n//   start(): string;\n// }\n\n// // Реалізації для стилю Futuristic\n// class FuturisticElectricMoped implements ElectricMoped {\n//   start(): string {\n//     return 'Стартую на футуристичному електромопеді Альфа';\n//   }\n// }\n\n// class FuturisticGasolineMoped implements GasolineMoped {\n//   start(): string {\n//     return 'Стартую на футуристичному бензиновому мопеді Альфа';\n//   }\n// }\n\n// // Реалізації для стилю Retro\n// class RetroElectricMoped implements ElectricMoped {\n//   start(): string {\n//     return 'Стартую на ретро електромопеді Альфа';\n//   }\n// }\n\n// class RetroGasolineMoped implements GasolineMoped {\n//   start(): string {\n//     return 'Стартую на ретро бензиновому мопеді Альфа';\n//   }\n// }\n\n// // Абстрактна фабрика\n// interface MopedFactory {\n//   createElectricMoped(): ElectricMoped;\n//   createGasolineMoped(): GasolineMoped;\n// }\n\n// // Фабрика для Futuristic стилю\n// class FuturisticMopedFactory implements MopedFactory {\n//   createElectricMoped(): ElectricMoped {\n//     return new FuturisticElectricMoped();\n//   }\n\n//   createGasolineMoped(): GasolineMoped {\n//     return new FuturisticGasolineMoped();\n//   }\n// }\n\n// // Фабрика для Retro стилю\n// class RetroMopedFactory implements MopedFactory {\n//   createElectricMoped(): ElectricMoped {\n//     return new RetroElectricMoped();\n//   }\n\n//   createGasolineMoped(): GasolineMoped {\n//     return new RetroGasolineMoped();\n//   }\n// }\n\n// // Клієнтський код\n// function clientCode(factory: MopedFactory) {\n//   const electricMoped = factory.createElectricMoped();\n//   const gasolineMoped = factory.createGasolineMoped();\n\n//   console.log(electricMoped.start());\n//   console.log(gasolineMoped.start());\n// }\n\n// // Використання\n// const futuristicMopedFactory = new FuturisticMopedFactory();\n// console.log('Futuristic Mopeds:');\n// clientCode(futuristicMopedFactory);\n\n// const retroMopedFactory = new RetroMopedFactory();\n// console.log('\\nRetro Mopeds:');\n// clientCode(retroMopedFactory);\n\n// ==============adapter=========================================\n// interface PcGame {\n//   launch(): string;\n// }\n\n// // Клас, що описує стару гру для приставки\n// class ConsoleGame {\n//   startOnConsole(): string {\n//     return 'Гра для старої приставки.';\n//   }\n// }\n\n// // Адаптер, який дозволяє запустити гру на ПК\n// class ConsoleToPcAdapter implements PcGame {\n//   private readonly consoleGame: ConsoleGame;\n\n//   constructor(consoleGame: ConsoleGame) {\n//     this.consoleGame = consoleGame;\n//   }\n\n//   launch(): string {\n//     return `${this.consoleGame.startOnConsole()} (адаптовано для запуску на ПК)`;\n//   }\n// }\n\n// // Використання\n// const consoleGame = new ConsoleGame();\n// const pcGameAdapter = new ConsoleToPcAdapter(consoleGame);\n\n// console.log(pcGameAdapter.launch());\n\n// =========decorator===========================================\n// Базовий інтерфейс\n// interface Player {\n//   getStats(): string;\n//   getProtectionLevel(): number;\n// }\n\n// // Конкретний компонент: базовий герой\n// class BasicPlayer implements Player {\n//   getStats(): string {\n//     return 'Player: Basic equipment';\n//   }\n\n//   getProtectionLevel(): number {\n//     return 0; // Початковий рівень захисту\n//   }\n// }\n\n// // Базовий декоратор\n// class PlayerDecorator implements Player {\n//   protected player: Player;\n\n//   constructor(player: Player) {\n//     this.player = player;\n//   }\n\n//   getStats(): string {\n//     return this.player.getStats();\n//   }\n\n//   getProtectionLevel(): number {\n//     return this.player.getProtectionLevel();\n//   }\n// }\n\n// // Декоратор: додавання бронежилета\n// class ArmorDecorator extends PlayerDecorator {\n//   getStats(): string {\n//     return `${super.getStats()} + Armor`;\n//   }\n\n//   getProtectionLevel(): number {\n//     return super.getProtectionLevel() + 50; // Додаємо 50 одиниць захисту\n//   }\n// }\n\n// // Декоратор: додавання каски\n// class HelmetDecorator extends PlayerDecorator {\n//   getStats(): string {\n//     return `${super.getStats()} + Helmet`;\n//   }\n\n//   getProtectionLevel(): number {\n//     return super.getProtectionLevel() + 25; // Додаємо 25 одиниць захисту\n//   }\n// }\n\n// // Використання\n// const basicPlayer = new BasicPlayer();\n// console.log(\n//   'Базовий гравець:',\n//   basicPlayer.getStats(),\n//   '| Захист:',\n//   basicPlayer.getProtectionLevel()\n// );\n\n// const playerWithArmor = new ArmorDecorator(basicPlayer);\n// console.log(\n//   'Гравець з бронежилетом:',\n//   playerWithArmor.getStats(),\n//   '| Захист:',\n//   playerWithArmor.getProtectionLevel()\n// );\n\n// const playerWithArmorAndHelmet = new HelmetDecorator(playerWithArmor);\n// console.log(\n//   'Гравець з бронежилетом і каскою:',\n//   playerWithArmorAndHelmet.getStats(),\n//   '| Захист:',\n//   playerWithArmorAndHelmet.getProtectionLevel()\n// );\n\n// ===============bridge======================================\n// // інтерфейс\n// interface Color {\n//   applyColor(): string;\n// }\n\n// class RedColor implements Color {\n//   applyColor() {\n//     return 'червоного кольору.';\n//   }\n// }\n\n// class BlueColor implements Color {\n//   applyColor() {\n//     return 'синього кольору.';\n//   }\n// }\n\n// // Абстракція для моделі мопеда\n// abstract class Moped {\n//   protected color: Color;\n\n//   constructor(color: Color) {\n//     this.color = color;\n//   }\n\n//   abstract displayDetails(): string;\n// }\n\n// // Конкретні моделі мопедів\n// class AlphaMoped extends Moped {\n//   displayDetails() {\n//     return `Мопед Альфа ${this.color.applyColor()}`;\n//   }\n// }\n\n// class KarpatyMoped extends Moped {\n//   displayDetails() {\n//     return `Мопед Карпати ${this.color.applyColor()}`;\n//   }\n// }\n\n// // Використання\n// const alphaRed = new AlphaMoped(new RedColor());\n// const karpatyBlue = new KarpatyMoped(new BlueColor());\n\n// function getDetails(moped: Moped) {\n//   const result = moped.displayDetails();\n//   console.log(result);\n// }\n\n// getDetails(karpatyBlue);\n// getDetails(alphaRed);\n\n// ===============facade=====================================\n// // Підсистема 1: Двигун мопеда\n// class Engine {\n//   start() {\n//     console.log('Двигун запущено');\n//   }\n\n//   stop() {\n//     console.log('Двигун зупинено');\n//   }\n// }\n\n// // Підсистема 2: Ліхтарі мопеда\n// class Lights {\n//   turnOn() {\n//     console.log('Ліхтарі включені');\n//   }\n\n//   turnOff() {\n//     console.log('Ліхтарі вимкнено');\n//   }\n// }\n\n// // Підсистема 3: Кермо мопеда\n// class Handlebar {\n//   turnLeft() {\n//     console.log('Кермо повернуте наліво');\n//   }\n\n//   turnRight() {\n//     console.log('Кермо повернуте направо');\n//   }\n// }\n\n// // Підсистема 4: Колеса мопеда\n// class Wheels {\n//   startMoving() {\n//     console.log('Колеса почали рухатись');\n//   }\n\n//   stopMoving() {\n//     console.log('Колеса зупинились');\n//   }\n// }\n\n// // Facade: спрощений інтерфейс для мопеда Альфа\n// class AlphaMopedFacade {\n//   private readonly engine: Engine;\n//   private readonly lights: Lights;\n//   private readonly handlebar: Handlebar;\n//   private readonly wheels: Wheels;\n\n//   constructor() {\n//     this.engine = new Engine();\n//     this.lights = new Lights();\n//     this.handlebar = new Handlebar();\n//     this.wheels = new Wheels();\n//   }\n\n//   startMoped() {\n//     this.lights.turnOn();\n//     this.engine.start();\n//     this.wheels.startMoving();\n//     console.log('Мопед готовий до поїздки');\n//   }\n\n//   stopMoped() {\n//     this.wheels.stopMoving();\n//     this.engine.stop();\n//     this.lights.turnOff();\n//     console.log('Мопед зупинено');\n//   }\n\n//   turnLeft() {\n//     this.handlebar.turnLeft();\n//   }\n\n//   turnRight() {\n//     this.handlebar.turnRight();\n//   }\n// }\n\n// // Клієнтський код\n// const moped = new AlphaMopedFacade();\n\n// moped.startMoped(); // Запуск мопеда\n// moped.turnLeft(); // Поворот наліво\n// moped.stopMoped(); // Зупинка мопеда\n\n// ==============proxy========================================\n// Інтерфейс, який описує поведінку сервісу\ninterface DataService {\n  getData(): string;\n}\n\n// Реальний сервіс, який містить основну бізнес-логіку\nclass RealDataService implements DataService {\n  getData(): string {\n    return 'Дані з сервісу.';\n  }\n}\n\n// Проксі-сервіс, який додає додаткову логіку, наприклад кешування\nclass CachedDataServiceProxy implements DataService {\n  private readonly realDataService: RealDataService;\n  private cachedData: string | null = null;\n\n  constructor(realDataService: RealDataService) {\n    this.realDataService = realDataService;\n  }\n\n  getData(): string {\n    if (!this.cachedData) {\n      console.log('Завантаження даних із основного сервісу...');\n      this.cachedData = this.realDataService.getData();\n    } else {\n      console.log('Повернення кешованих даних.');\n    }\n    return this.cachedData;\n  }\n}\n\n// Приклад використання\nconst cachedProxy = new CachedDataServiceProxy(new RealDataService());\n\nfunction clientCode(data: DataService) {\n  data.getData();\n}\n\nclientCode(cachedProxy); // Завантаження даних із основного сервісу...\nclientCode(cachedProxy); // Повернення кешованих даних.\n\n// ===========composite=====================================\n// // Абстрактний клас Компонент\n// abstract class Component {\n//   abstract displayDetails(): void;\n//   abstract getPrice(): number;\n// }\n\n// // Конкретний компонент: частина мопеда\n// class MopedPart extends Component {\n//   private readonly name: string;\n//   private readonly price: number;\n\n//   constructor(name: string, price: number) {\n//     super();\n//     this.name = name;\n//     this.price = price;\n//   }\n\n//   displayDetails(): void {\n//     console.log(`Part: ${this.name}, Price: ${this.price}₴`);\n//   }\n\n//   getPrice(): number {\n//     return this.price;\n//   }\n// }\n\n// // Композитний компонент: мопед\n// class Moped extends Component {\n//   private readonly name: string;\n//   private readonly parts: Component[] = [];\n\n//   constructor(name: string) {\n//     super();\n//     this.name = name;\n//   }\n\n//   addPart(part: Component): void {\n//     this.parts.push(part);\n//   }\n\n//   removePart(part: Component): void {\n//     const idx = this.parts.indexOf(part);\n//     if (idx !== -1) this.parts.splice(idx, 1);\n//   }\n\n//   displayDetails(): void {\n//     console.log(`Moped: ${this.name}`);\n//     for (const part of this.parts) {\n//       part.displayDetails();\n//     }\n//   }\n\n//   getPrice(): number {\n//     return this.parts.reduce((total, part) => total + part.getPrice(), 0);\n//   }\n// }\n\n// // Використання\n// const alphaMoped = new Moped('Alpha');\n\n// // Додаємо частини мопеда з цінами\n// const frame = new MopedPart('Frame', 1000);\n// const engine = new MopedPart('Engine', 5000);\n// const wheels = new MopedPart('Wheels', 2000);\n// const handlebar = new MopedPart('Handlebar', 50);\n\n// alphaMoped.addPart(frame);\n// alphaMoped.addPart(engine);\n// alphaMoped.addPart(wheels);\n// alphaMoped.addPart(handlebar);\n// // Видаляємо додану частину (наприклад, \"Handlebar\")\n// alphaMoped.removePart(handlebar);\n// // Виведення ієрархії мопеда та загальної ціни\n// alphaMoped.displayDetails();\n// console.log(`Total Price: ${alphaMoped.getPrice()}₴`);\n"],"names":["RealDataService","CachedDataServiceProxy","realDataService","__publicField","cachedProxy","clientCode","data"],"mappings":"82BAmkBA,MAAMA,CAAuC,CAC3C,SAAkB,CACT,MAAA,iBACT,CACF,CAGA,MAAMC,CAA8C,CAIlD,YAAYC,EAAkC,CAH7BC,EAAA,wBACTA,EAAA,kBAA4B,MAGlC,KAAK,gBAAkBD,CACzB,CAEA,SAAkB,CACZ,OAAC,KAAK,WAIR,QAAQ,IAAI,6BAA6B,GAHzC,QAAQ,IAAI,4CAA4C,EACnD,KAAA,WAAa,KAAK,gBAAgB,QAAQ,GAI1C,KAAK,UACd,CACF,CAGA,MAAME,EAAc,IAAIH,EAAuB,IAAID,CAAiB,EAEpE,SAASK,EAAWC,EAAmB,CACrCA,EAAK,QAAQ,CACf,CAEAD,EAAWD,CAAW,EACtBC,EAAWD,CAAW"}